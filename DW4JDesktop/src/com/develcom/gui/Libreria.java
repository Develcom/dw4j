/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Libreria.java
 *
 * Created on 29/02/2012, 01:46:44 PM
 */
package com.develcom.gui;

import com.develcom.gui.consulta.ConsultaExpediente;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.apache.log4j.Level;
import ve.com.develcom.sesion.IniciaSesion;
import com.develcom.autentica.Perfil;
import com.develcom.autentica.Sesion;
import com.develcom.dao.Expediente;
import com.develcom.dao.ManejoSesion;
import com.develcom.dao.Mensajes;
import com.develcom.gui.calidad.BuscaExpediente;
import com.develcom.gui.captura.DigitalizaDocumento;
import com.develcom.gui.elimina.EliminaDocumento;
import com.develcom.gui.indice.ConsultaIndices;
import com.develcom.gui.tools.CentraVentanas;
import com.develcom.tools.Constantes;
import com.develcom.tools.trazas.Traza;
import javax.xml.soap.SOAPException;
import javax.xml.ws.soap.SOAPFaultException;

/**
 * Muestra las Librerias y Categorias
 *
 * @author develcom
 */
public class Libreria extends javax.swing.JInternalFrame {

    private static final long serialVersionUID = 1L;
    /**
     * Escribe trazas en el log
     */
    private Traza traza = new Traza(Libreria.class);
    private List<Perfil> perfiles;

    /**
     * Constructor, inica los componentes y llena la lista desplegable librerias
     *
     * @param sesion Lista con las librerias y categorias
     * @param titulo El titulo segun el modulo a usar
     */
    public Libreria(List<Sesion> sesion, String titulo) {
        this.setResizable(false);
        initComponents();
        cboCategoria.setEnabled(false);
        jbtAceptar.setEnabled(false);
        llenarcboLibreria();
        CentraVentanas.centrar(this, Principal.desktop);
        setTitle(titulo);
        this.setVisible(true);

    }

    /**
     * Llena la lista desplegables con las Librerias
     */
    private void llenarcboLibreria() {
        String lib = "";
        try {
            traza.trace("llenando lista de libreria", Level.INFO);
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();
            modelo.addElement("");

            traza.trace("buscando las libreria del usuario " + ManejoSesion.getLogin() + " con el perfil " + Constantes.ROL, Level.INFO);
            perfiles = new IniciaSesion().buscarLibCatPerfil(ManejoSesion.getLogin(), Constantes.ROL);

            traza.trace("tama√±o perfiles " + perfiles.size(), Level.INFO);

            for (Perfil perfil : perfiles) {
                String des = perfil.getLibreria().getDescripcion();
                if (!lib.equalsIgnoreCase(des)) {
                    lib = perfil.getLibreria().getDescripcion();
                    if (perfil.getLibreria().getEstatus().equalsIgnoreCase(Constantes.ACTIVO)) {
                        modelo.addElement(perfil.getLibreria().getDescripcion());
                    }
                }
            }

            cboLibreria.setModel(modelo);
        } catch (SOAPException | SOAPFaultException e) {
            traza.trace("error al llenar lista de libreria", Level.INFO, e);
            JOptionPane.showMessageDialog(this, "Error al llenar lista de libreria\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpLibreria = new javax.swing.JPanel();
        cboLibreria = new javax.swing.JComboBox();
        jlbLibreria = new javax.swing.JLabel();
        jpCategoria = new javax.swing.JPanel();
        cboCategoria = new javax.swing.JComboBox();
        jlbTipoDocumento = new javax.swing.JLabel();
        jpBotones = new javax.swing.JPanel();
        jbtAceptar = new javax.swing.JButton();
        jbtCancelar = new javax.swing.JButton();

        setBackground(new java.awt.Color(224, 239, 255));
        setTitle("Seleccionar Libreria");

        jpLibreria.setBackground(new java.awt.Color(224, 239, 255));

        cboLibreria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLibreriaActionPerformed(evt);
            }
        });

        jlbLibreria.setText("Libreria");

        javax.swing.GroupLayout jpLibreriaLayout = new javax.swing.GroupLayout(jpLibreria);
        jpLibreria.setLayout(jpLibreriaLayout);
        jpLibreriaLayout.setHorizontalGroup(
            jpLibreriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLibreriaLayout.createSequentialGroup()
                .addComponent(jlbLibreria, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(282, Short.MAX_VALUE))
            .addComponent(cboLibreria, 0, 388, Short.MAX_VALUE)
        );
        jpLibreriaLayout.setVerticalGroup(
            jpLibreriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLibreriaLayout.createSequentialGroup()
                .addComponent(jlbLibreria, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboLibreria)
                .addContainerGap())
        );

        jpCategoria.setBackground(new java.awt.Color(224, 239, 255));
        jpCategoria.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jlbTipoDocumento.setText("Categoria");

        javax.swing.GroupLayout jpCategoriaLayout = new javax.swing.GroupLayout(jpCategoria);
        jpCategoria.setLayout(jpCategoriaLayout);
        jpCategoriaLayout.setHorizontalGroup(
            jpCategoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCategoriaLayout.createSequentialGroup()
                .addComponent(jlbTipoDocumento)
                .addContainerGap(341, Short.MAX_VALUE))
            .addComponent(cboCategoria, 0, 388, Short.MAX_VALUE)
        );
        jpCategoriaLayout.setVerticalGroup(
            jpCategoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCategoriaLayout.createSequentialGroup()
                .addComponent(jlbTipoDocumento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpBotones.setBackground(new java.awt.Color(224, 239, 255));

        jbtAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develcom/gui/imagenes/develcom/Knob Valid Green.png"))); // NOI18N
        jbtAceptar.setMnemonic('a');
        jbtAceptar.setText("Aceptar");
        jbtAceptar.setToolTipText("Aceptar");
        jbtAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAceptarActionPerformed(evt);
            }
        });

        jbtCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develcom/gui/imagenes/develcom/Knob Cancel.png"))); // NOI18N
        jbtCancelar.setMnemonic('c');
        jbtCancelar.setText("Cerrar");
        jbtCancelar.setToolTipText("Cancelar");
        jbtCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpBotonesLayout = new javax.swing.GroupLayout(jpBotones);
        jpBotones.setLayout(jpBotonesLayout);
        jpBotonesLayout.setHorizontalGroup(
            jpBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBotonesLayout.createSequentialGroup()
                .addComponent(jbtAceptar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 182, Short.MAX_VALUE)
                .addComponent(jbtCancelar))
        );
        jpBotonesLayout.setVerticalGroup(
            jpBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBotonesLayout.createSequentialGroup()
                .addGroup(jpBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpLibreria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpLibreria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Cierra esta ventana para ir a las subcategorias con la informacion de la
     * libreria y la categoria
     */
    private void jbtAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAceptarActionPerformed
        aceptar();
}//GEN-LAST:event_jbtAceptarActionPerformed

    /**
     * Cierra esta ventana para ir a las subcategorias con la informacion de la
     * libreria y la categoria
     */
    private void aceptar() {
        Expediente expediente = new Expediente();
        String lib, cat;
        int idLib = 0, idCat = 0;

        traza.trace("armando informacion del expediente", Level.INFO);

        lib = cboLibreria.getSelectedItem().toString();
        cat = cboCategoria.getSelectedItem().toString();

        cboLibreria.setEnabled(false);
        cboCategoria.setEnabled(false);

        Mensajes.setMensaje(lib + " - " + cat);

        for (Perfil perfil : perfiles) {

            if (perfil.getLibreria().getDescripcion().equalsIgnoreCase(lib)) {
                idLib = perfil.getLibreria().getIdLibreria();
                expediente.setIdLibreria(idLib);
                expediente.setLibreria(lib);
            }

            if (perfil.getCategoria().getCategoria().equalsIgnoreCase(cat)) {
                idCat = perfil.getCategoria().getIdCategoria();
                expediente.setIdCategoria(idCat);
                expediente.setCategoria(cat);
            }
        }

        traza.trace("seleccion la libreria " + lib + " id " + idLib, Level.INFO);
        traza.trace("seleccion la categoria " + cat + " id " + idCat, Level.INFO);

        setVisible(false);
        this.dispose();

        ManejoSesion.setExpediente(expediente);
        if (Constantes.ACCION.equalsIgnoreCase("CAPTURAR")) {
            DigitalizaDocumento dd = new DigitalizaDocumento();
            Principal.desktop.add(dd);
        } else if (Constantes.ACCION.equalsIgnoreCase("CONSULTAR")) {
            ConsultaExpediente ce = new ConsultaExpediente();
            Principal.desktop.add(ce);
        } else if (Constantes.ACCION.equalsIgnoreCase("APROBAR")) {
            BuscaExpediente be = new BuscaExpediente();
            Principal.desktop.add(be);
        } else if (Constantes.ACCION.equalsIgnoreCase("ACTUALIZAR_INDICES")) {
            ConsultaIndices ci = new ConsultaIndices();
            Principal.desktop.add(ci);
        } else if (Constantes.ACCION.equalsIgnoreCase("ELIMINAR")) {
            EliminaDocumento ed = new EliminaDocumento();
            Principal.desktop.add(ed);
        }
    }

    /**
     * Cierra esta ventana
     *
     * @param evt
     */
    private void jbtCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtCancelarActionPerformed
        //traza.trace("cancelando", Level.INFO);
        //this.removeAll();
        dispose();
}//GEN-LAST:event_jbtCancelarActionPerformed

    /**
     * Llena la lista desplegable categorias
     *
     * @param evt
     */
    private void cboLibreriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLibreriaActionPerformed
        if (!cboLibreria.getSelectedItem().equals("")) {
            llenarcboCategoria();
            jbtAceptar.setEnabled(true);
        } else {
            cboCategoria.setEnabled(false);
            jbtAceptar.setEnabled(false);
        }
    }//GEN-LAST:event_cboLibreriaActionPerformed

    /**
     * Llena la lista desplegable con las Categorias
     */
    private void llenarcboCategoria() {
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        String lib = "", cat = "";

        try {
            traza.trace("llenando lista de categorias", Level.INFO);
            lib = cboLibreria.getSelectedItem().toString();

            for (Perfil catego : perfiles) {
                if (catego.getLibreria().getDescripcion().equalsIgnoreCase(lib)) {
                    String categ = catego.getCategoria().getCategoria();
                    if (!cat.equalsIgnoreCase(categ)) {
                        cat = catego.getCategoria().getCategoria();
                        if (catego.getCategoria().getEstatus().equalsIgnoreCase(Constantes.ACTIVO)) {
                            modelo.addElement(categ);
                        }
                    }
                }
            }

            cboCategoria.setModel(modelo);

            cboCategoria.setEnabled(true);

        } catch (Exception e) {
            traza.trace("error al llenar lista de categoria", Level.INFO, e);
            JOptionPane.showMessageDialog(this, "Error al llenar lista de categoria\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboCategoria;
    private javax.swing.JComboBox cboLibreria;
    private javax.swing.JButton jbtAceptar;
    private javax.swing.JButton jbtCancelar;
    private javax.swing.JLabel jlbLibreria;
    private javax.swing.JLabel jlbTipoDocumento;
    private javax.swing.JPanel jpBotones;
    private javax.swing.JPanel jpCategoria;
    private javax.swing.JPanel jpLibreria;
    // End of variables declaration//GEN-END:variables

}
