/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RechazarDocumento.java
 *
 * Created on 19/06/2012, 09:11:21 AM
 */
package com.develcom.gui.calidad;

import com.develcom.dao.ManejoSesion;
import com.develcom.elimina.Categoria;
import com.develcom.elimina.EliminaDocumento_Type;
import com.develcom.elimina.InfoDocumento;
import com.develcom.elimina.Libreria;
import com.develcom.elimina.SubCategoria;
import com.develcom.gui.tools.CentraVentanas;
import com.develcom.gui.tools.MostrarProceso;
import com.develcom.tools.Constantes;
import com.develcom.tools.trazas.Traza;
import java.awt.Frame;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import javax.xml.soap.SOAPException;
import javax.xml.ws.soap.SOAPFaultException;
import org.apache.log4j.Level;
import ve.com.develcom.aprueba.CalidadDocumento;
import ve.com.develcom.elimina.QuitaDocumento;

/**
 *
 * @author develcom
 */
public class RechazarDocumento extends javax.swing.JDialog {

    private static final long serialVersionUID = 4269340100052765222L;
    private Traza traza = new Traza(RechazarDocumento.class);
    private int idInfoDocumento;
    private String tipoDocumento;
    private int versionSeleccionada;
    private boolean resultado = false;
    private InfoDocumento infoDocumento;

    public RechazarDocumento(int idInfoDocumento, String tipoDocumento, int versionSeleccionada) {
        super(new Frame(), true);
        this.idInfoDocumento = idInfoDocumento;
        this.tipoDocumento = tipoDocumento;
        this.versionSeleccionada = versionSeleccionada;
        initComponents();
        setBackground(new java.awt.Color(224, 239, 255));
        llenarCombo();

        setTitle("Rechazar Documento");
        lblCausa.setText("Causa para rechazar");
        TitledBorder tb = (TitledBorder) panelRechazo.getBorder();
        tb.setTitle("Motivo para rechazar");

        CentraVentanas.centerDialog(this);
        setVisible(true);
    }

    public RechazarDocumento(InfoDocumento infoDocumento) {
        super(new Frame(), true);
        this.infoDocumento = infoDocumento;
        versionSeleccionada = infoDocumento.getVersion();
        initComponents();
        setBackground(new java.awt.Color(224, 239, 255));
        llenarCombo();

        setTitle("Eliminar Documento");
        lblCausa.setText("Causa de la eliminación");
        TitledBorder tb = (TitledBorder) panelRechazo.getBorder();
        tb.setTitle("Motivo de la eliminación");

        CentraVentanas.centerDialog(this);
        setVisible(true);
    }

    private void llenarCombo() {
        try {
            List<String> causas = new CalidadDocumento().encontrarCausasRechazo();

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();

            modelo.addElement("");

            for (int i = 0; i < causas.size(); i++) {
                modelo.addElement(causas.get(i));
            }

            cboCausa.setModel(modelo);
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonAceptar = new javax.swing.JButton();
        jButtonRegresar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblCausa = new javax.swing.JLabel();
        cboCausa = new javax.swing.JComboBox();
        panelRechazo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaMotivo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(224, 239, 255));

        jButtonAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develcom/gui/imagenes/develcom/Knob Valid Green.png"))); // NOI18N
        jButtonAceptar.setMnemonic('a');
        jButtonAceptar.setText("Aceptar");
        jButtonAceptar.setToolTipText("Aceptar");
        jButtonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAceptarActionPerformed(evt);
            }
        });

        jButtonRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develcom/gui/imagenes/develcom/Knob Cancel.png"))); // NOI18N
        jButtonRegresar.setMnemonic('c');
        jButtonRegresar.setText("Cancelar");
        jButtonRegresar.setToolTipText("Cancelar");
        jButtonRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegresarActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(224, 239, 255));

        lblCausa.setText("Causa del rechazo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCausa)
                .addGap(6, 6, 6)
                .addComponent(cboCausa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCausa)
                    .addComponent(cboCausa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelRechazo.setBackground(new java.awt.Color(224, 239, 255));
        panelRechazo.setBorder(javax.swing.BorderFactory.createTitledBorder("Motivo del rechazo"));

        jtaMotivo.setColumns(20);
        jtaMotivo.setRows(5);
        jScrollPane1.setViewportView(jtaMotivo);

        javax.swing.GroupLayout panelRechazoLayout = new javax.swing.GroupLayout(panelRechazo);
        panelRechazo.setLayout(panelRechazoLayout);
        panelRechazoLayout.setHorizontalGroup(
            panelRechazoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRechazoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        panelRechazoLayout.setVerticalGroup(
            panelRechazoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAceptar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                        .addComponent(jButtonRegresar))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelRechazo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelRechazo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAceptar)
                    .addComponent(jButtonRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAceptarActionPerformed
        aceptar();
}//GEN-LAST:event_jButtonAceptarActionPerformed

    private void aceptar() {

        String causa;
        String motivo;
        String usuario;
        String nombre, datos;
        int n = 0;

        try {

            if (Constantes.ACCION.equalsIgnoreCase("ELIMINAR")) {

                n = JOptionPane.showOptionDialog(this,
                        "Seguro que desea eliminar el documento " + infoDocumento.getTipoDocumento() + " version " + versionSeleccionada + " \n(" + infoDocumento.getIdInfoDocumento() + ")",
                        "¿?",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, new Object[]{"SI", "NO"}, "NO");
            } else {

                n = JOptionPane.showOptionDialog(this,
                        "Seguro que desea rechazar el documento " + tipoDocumento + " version " + versionSeleccionada + " \n(" + idInfoDocumento + ")",
                        "¿?",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, new Object[]{"SI", "NO"}, "NO");
            }
            if (n == JOptionPane.YES_OPTION) {

                causa = cboCausa.getSelectedItem().toString();
                motivo = jtaMotivo.getText();
                usuario = ManejoSesion.getLogin();

                if (!causa.equalsIgnoreCase("")) {
                    if (!motivo.equalsIgnoreCase("")) {

                        if (Constantes.ACCION.equalsIgnoreCase("ELIMINAR")) {

                            Libreria libreria = new Libreria();
                            Categoria categoria = new Categoria();
                            SubCategoria subCategoria = new SubCategoria();
                            EliminaDocumento_Type ed = new EliminaDocumento_Type();

                            libreria.setIdLibreria(ManejoSesion.getExpediente().getIdLibreria());
                            libreria.setDescripcion(ManejoSesion.getExpediente().getLibreria());
                            ed.setLibreria(libreria);

                            categoria.setIdCategoria(ManejoSesion.getExpediente().getIdCategoria());
                            categoria.setCategoria(ManejoSesion.getExpediente().getCategoria());
                            ed.setCategoria(categoria);

                            subCategoria.setIdSubCategoria(ManejoSesion.getExpediente().getIdSubCategoria());
                            subCategoria.setSubCategoria(ManejoSesion.getExpediente().getSubCategoria());
                            ed.setSubCategoria(subCategoria);

                            ed.setCausaElimino(causa);
                            ed.setMotivoElimino(motivo);
                            ed.setIdExpediente(ManejoSesion.getExpediente().getIdExpediente());
                            ed.setUsuarioElimino(ManejoSesion.getLogin());
                            ed.setInfoDocumento(infoDocumento);

                            eliminar(ed);

                        } else {
                            
                            resultado = new CalidadDocumento().rechazarDoc(idInfoDocumento, usuario, causa, motivo);

                            if (resultado) {
                                JOptionPane.showMessageDialog(this, "Documento rechazado con exito", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                                dispose();
                            } else {
                                JOptionPane.showMessageDialog(this, "Problemas al rechazar el documento", "Error", JOptionPane.ERROR_MESSAGE);
                                dispose();
                            }
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Debe agregar un motivo", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Debe elejir una causa", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            }

        } catch (SOAPException ex) {
            traza.trace("error al rechazar/eliminar el documento", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error al rechazar/eliminar el documento", Level.ERROR, ex);
        } catch (Exception e) {
            traza.trace("error al rechazar/eliminar el documento", Level.ERROR, e);
        }

    }

    private void eliminar(final EliminaDocumento_Type ed) {

        final MostrarProceso proceso = new MostrarProceso("<html>Eliminando el documento " + infoDocumento.getTipoDocumento() + "<br/> version " + versionSeleccionada + "</html>");
        proceso.start();

        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    resultado = new QuitaDocumento().eliminarTipoDocumento(ed);
                    traza.trace("resultado eliminar " + resultado, Level.INFO);

                    if (resultado) {
                        JOptionPane.showMessageDialog(new JFrame(), "Documento eliminado con exito", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                    } else {
                        JOptionPane.showMessageDialog(new JFrame(), "Problemas al eliminar el documento", "Error", JOptionPane.ERROR_MESSAGE);
                        dispose();
                    }

                } catch (SOAPException | SOAPFaultException ex) {
                    traza.trace("error al eliminar el documento", Level.ERROR, ex);
                    JOptionPane.showMessageDialog(new JFrame(), "Error al eliminar el documento\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    dispose();
                }
                proceso.detener();
            }
        }).start();
    }

    private void jButtonRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegresarActionPerformed

        dispose();
}//GEN-LAST:event_jButtonRegresarActionPerformed
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                RechazarDocumento dialog = new RechazarDocumento(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboCausa;
    private javax.swing.JButton jButtonAceptar;
    private javax.swing.JButton jButtonRegresar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jtaMotivo;
    private javax.swing.JLabel lblCausa;
    private javax.swing.JPanel panelRechazo;
    // End of variables declaration//GEN-END:variables

    public boolean isResultado() {
        return resultado;
    }
}
