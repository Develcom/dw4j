package com.develcom.gui.captura;

import com.develcom.dao.Expediente;
import com.develcom.dao.ManejoSesion;
import com.develcom.excepcion.DW4JDesktopExcepcion;
import com.develcom.expediente.Expedientes;
import com.develcom.expediente.Indice;
import com.develcom.gui.Principal;
import com.develcom.gui.tools.CentraVentanas;
import com.develcom.gui.tools.CreaObjetosDinamicos;
import com.develcom.gui.tools.MostrarProceso;
import com.develcom.tools.UtilidadPalabras;
import com.develcom.tools.trazas.Traza;
import com.toedter.calendar.JDateChooser;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.HeadlessException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.xml.soap.SOAPException;
import javax.xml.ws.soap.SOAPFaultException;
import org.apache.log4j.Level;
import ve.com.develcom.expediente.GestionExpediente;

/**
 * Permite crear un nuevo expediente
 *
 * @author develcom
 */
public class CreaExpediente extends javax.swing.JInternalFrame {

    private static final long serialVersionUID = -7537846469374094667L;

    //private SistemaRRHH rrhh = ManejoSesion.getSistemaRRHH();
    /**
     * Tiene toda la informacion del expediente
     */
    private Expediente expediente = new Expediente();
    /**
     * Escribe trazas en el log
     */
    private Traza traza = new Traza(CreaExpediente.class);
    /**
     * Lista de indices dinamicos
     */
    private List<Indice> indices = new ArrayList<>();
    private DigitalizaDocumento digitalizaDocumento;

    public CreaExpediente(DigitalizaDocumento digitalizaDocumento1) {

        this.digitalizaDocumento = digitalizaDocumento1;
        this.expediente = ManejoSesion.getExpediente();

        initComponents();
        iniciar();

    }
    
    private void iniciar(){
        
        setTitle("Nuevo Expediente (" + expediente.getIdExpediente() + ")");
        traza.trace("buscando la informacion del expediente en el seniat ", Level.INFO);
        jlMensajeLibreria.setText(expediente.getLibreria());
        jlMensajeCategoria.setText(expediente.getCategoria());
        jlMensajeSubCategoria.setText(expediente.getSubCategoria());
        CentraVentanas.centrar(this, Principal.desktop);

        buscarDatos();
        
    }

    private void buscarDatos() {

//        final MostrarProceso proceso = new MostrarProceso("Buscando los datos en el Seniat");
        final MostrarProceso proceso = new MostrarProceso("Armando el formulario");

        proceso.start();

        new Thread(new Runnable() {
            @Override
            public void run() {
                crearObjetos();
                proceso.detener();
            }
        }).start();

    }

    /**
     * Crea los indice dinamicos en el formulario
     */
    private void crearObjetos() {

        JTextField jTextField;
        GridBagConstraints constraints = new GridBagConstraints();
        CreaObjetosDinamicos uv = new CreaObjetosDinamicos(this);

        constraints.gridx = 0;
        constraints.gridy = 0;
        constraints.gridwidth = 1;
        constraints.gridheight = 1;

        panelIndices.setLayout(new FlowLayout(FlowLayout.CENTER));
        Dimension d = panelIndices.getPreferredSize();

        panelIndices.add(uv.crearObjetos(expediente));

        try {
            for (Indice indice : indices) {
                if (indice.getClave().equalsIgnoreCase("y")) {
                    jTextField = (JTextField) indice.getValor();
                    jTextField.setText(expediente.getIdExpediente());
                    jTextField.setEditable(false);
                }
            }
        } catch (Exception e) {
        }

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelIndices = new javax.swing.JPanel();
        jbGuardar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jlTituloLibreria2 = new javax.swing.JLabel();
        jlTituloLibreria1 = new javax.swing.JLabel();
        jlTituloLibreria = new javax.swing.JLabel();
        jlMensajeLibreria = new javax.swing.JLabel();
        jlMensajeCategoria = new javax.swing.JLabel();
        jlMensajeSubCategoria = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(224, 239, 255));

        panelIndices.setBackground(new java.awt.Color(224, 239, 255));
        panelIndices.setBorder(javax.swing.BorderFactory.createTitledBorder("Indices"));
        panelIndices.setAutoscrolls(true);

        javax.swing.GroupLayout panelIndicesLayout = new javax.swing.GroupLayout(panelIndices);
        panelIndices.setLayout(panelIndicesLayout);
        panelIndicesLayout.setHorizontalGroup(
            panelIndicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 936, Short.MAX_VALUE)
        );
        panelIndicesLayout.setVerticalGroup(
            panelIndicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 352, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panelIndices);

        jbGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develcom/gui/imagenes/develcom/save.png"))); // NOI18N
        jbGuardar.setMnemonic('e');
        jbGuardar.setText("Crear Expediente");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develcom/gui/imagenes/develcom/Knob Cancel.png"))); // NOI18N
        jbCancelar.setMnemonic('c');
        jbCancelar.setText("Cancelar");
        jbCancelar.setToolTipText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jScrollPane2.setBackground(new java.awt.Color(224, 239, 255));

        jPanel2.setBackground(new java.awt.Color(224, 239, 255));

        jlTituloLibreria2.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jlTituloLibreria2.setText("SubCategoria");
        jlTituloLibreria2.setAutoscrolls(true);

        jlTituloLibreria1.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jlTituloLibreria1.setText("Categoria");
        jlTituloLibreria1.setAutoscrolls(true);

        jlTituloLibreria.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jlTituloLibreria.setText("Libreria");
        jlTituloLibreria.setAutoscrolls(true);

        jlMensajeLibreria.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jlMensajeLibreria.setText("jLabel1");
        jlMensajeLibreria.setAutoscrolls(true);

        jlMensajeCategoria.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jlMensajeCategoria.setText("jLabel1");
        jlMensajeCategoria.setAutoscrolls(true);

        jlMensajeSubCategoria.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jlMensajeSubCategoria.setText("jLabel1");
        jlMensajeSubCategoria.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlTituloLibreria1)
                    .addComponent(jlTituloLibreria2)
                    .addComponent(jlTituloLibreria))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jlMensajeCategoria, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                    .addComponent(jlMensajeSubCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlMensajeLibreria, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloLibreria)
                    .addComponent(jlMensajeLibreria))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlMensajeCategoria)
                    .addComponent(jlTituloLibreria1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlMensajeSubCategoria)
                    .addComponent(jlTituloLibreria2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 913, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGuardar)
                    .addComponent(jbCancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Guarda el expediente
     *
     * @param evt
     */
    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed

        int n = JOptionPane.showOptionDialog(this,
                "¿Desea crear el expediente?",
                "Alerta...",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, new Object[]{"SI", "NO"}, "NO");

        if (n == JOptionPane.YES_OPTION) {
            guardar();
        }
    }//GEN-LAST:event_jbGuardarActionPerformed

    /**
     * Guarda la informacion del expediente y sus indices
     */
    private void guardar() {
        
        Expedientes expeWS = new Expedientes();
        boolean exito;
        Indice indice;
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        int idCategoria = expediente.getIdCategoria();
        int idLibreria = expediente.getIdLibreria();

        JDateChooser jDateChooser;
        JComboBox jComboBox;
        JTextField jTextField;
        JTextArea jTextArea;

        try {

            for (Indice ind : indices) {
                indice = new Indice();
                indice.setUpdateIndices(false);
                if (ind.getTipo().equalsIgnoreCase("texto")) {

                    jTextField = (JTextField) ind.getValor();
                    if ((ind.getClave().equalsIgnoreCase("y")) || (ind.getClave().equalsIgnoreCase("s")) || (ind.getClave().equalsIgnoreCase("o"))) {
                        String data = jTextField.getText();
                        if (!data.equalsIgnoreCase("")) {
                            indice.setIdIndice(ind.getIdIndice());
                            indice.setIndice(ind.getIndice());
                            indice.setTipo(ind.getTipo());
                            indice.setValor(data);
                        } else {
                            String arg = ind.getIndice().replace("_", " ");
                            arg = arg.toLowerCase();
                            char[] cs = arg.toCharArray();
                            char ch = cs[0];
                            cs[0] = Character.toUpperCase(ch);
                            arg = String.valueOf(cs);

                            throw new DW4JDesktopExcepcion("el " + arg + " no debe estar vacio");
                        }
                    } else {
                        indice.setIdIndice(ind.getIdIndice());
                        indice.setIndice(ind.getIndice());
                        indice.setTipo(ind.getTipo());
                        indice.setValor(jTextField.getText());
                    }

                } else if (ind.getTipo().equalsIgnoreCase("combo")) {

                    jComboBox = (JComboBox) ind.getValor();
                    if ((ind.getClave().equalsIgnoreCase("y")) || (ind.getClave().equalsIgnoreCase("s")) || (ind.getClave().equalsIgnoreCase("o"))) {
                        String data = jComboBox.getSelectedItem().toString();
                        if (!data.equalsIgnoreCase("")) {
                            indice.setIdIndice(ind.getIdIndice());
                            indice.setIndice(ind.getIndice());
                            indice.setTipo(ind.getTipo());
                            indice.setValor(data);
                        } else {
                            String arg = ind.getIndice().replace("_", " ");
                            arg = arg.toLowerCase();
                            char[] cs = arg.toCharArray();
                            char ch = cs[0];
                            cs[0] = Character.toUpperCase(ch);
                            arg = String.valueOf(cs);

                            throw new DW4JDesktopExcepcion("el " + arg + " no debe estar vacio");
                        }
                    } else {
                        indice.setIdIndice(ind.getIdIndice());
                        indice.setIndice(ind.getIndice());
                        indice.setTipo(ind.getTipo());
                        indice.setValor(jComboBox.getSelectedItem().toString());
                    }

                } else if (ind.getTipo().equalsIgnoreCase("fecha")) {

                    try {

                        jDateChooser = (JDateChooser) ind.getValor();
                        Calendar calendar = jDateChooser.getCalendar();

                        if ((ind.getClave().equalsIgnoreCase("y")) || (ind.getClave().equalsIgnoreCase("s")) || (ind.getClave().equalsIgnoreCase("o"))) {

                            if (calendar != null) {
                                indice.setIdIndice(ind.getIdIndice());
                                indice.setIndice(ind.getIndice());
                                indice.setTipo(ind.getTipo());
                                indice.setValor(sdf.format(calendar.getTime()));
                            } else {
                                String arg = ind.getIndice().replace("_", " ");
                                arg = arg.toLowerCase();
                                char[] cs = arg.toCharArray();
                                char ch = cs[0];
                                cs[0] = Character.toUpperCase(ch);
                                arg = String.valueOf(cs);

                                throw new DW4JDesktopExcepcion("el " + arg + " no debe estar vacio");
                            }
                        } else {
                            indice.setIdIndice(ind.getIdIndice());
                            indice.setIndice(ind.getIndice());
                            indice.setTipo(ind.getTipo());
                            indice.setValor(sdf.format(calendar.getTime()));
                        }

                    } catch (NullPointerException e) {
                    }

                } else if (ind.getTipo().equalsIgnoreCase("numero")) {


                        jTextField = (JTextField) ind.getValor();

                        String dat = jTextField.getText();

                        traza.trace(ind.getIndice() + " - " + dat, Level.INFO);

                        if (jTextField.getText().matches(UtilidadPalabras.VALIDAR_NUMEROS)) {

                            if ((ind.getClave().equalsIgnoreCase("y")) || (ind.getClave().equalsIgnoreCase("s")) || (ind.getClave().equalsIgnoreCase("o"))) {
                                String data = jTextField.getText();
                                if (!data.equalsIgnoreCase("")) {
                                    indice.setIdIndice(ind.getIdIndice());
                                    indice.setIndice(ind.getIndice());
                                    indice.setTipo(ind.getTipo());
                                    indice.setValor(data);
                                } else {
                                    String arg = ind.getIndice().replace("_", " ");
                                    arg = arg.toLowerCase();
                                    char[] cs = arg.toCharArray();
                                    char ch = cs[0];
                                    cs[0] = Character.toUpperCase(ch);
                                    arg = String.valueOf(cs);

                                    throw new DW4JDesktopExcepcion("el " + arg + " no debe estar vacio");
                                }
                            } else {
                                indice.setIdIndice(ind.getIdIndice());
                                indice.setIndice(ind.getIndice());
                                indice.setTipo(ind.getTipo());
                                indice.setValor(jTextField.getText());
                            }
                        } else {
                            String arg = ind.getIndice().replace("_", " ");
                            arg = arg.toLowerCase();
                            char[] cs = arg.toCharArray();
                            char ch = cs[0];
                            cs[0] = Character.toUpperCase(ch);
                            arg = String.valueOf(cs);

                            throw new DW4JDesktopExcepcion("el " + arg + " debe ser solo numeros");
                        }
                    

                } else if (ind.getTipo().equalsIgnoreCase("area")) {

                    jTextArea = (JTextArea) ind.getValor();
                    if ((ind.getClave().equalsIgnoreCase("y")) || (ind.getClave().equalsIgnoreCase("s")) || (ind.getClave().equalsIgnoreCase("o"))) {
                        String data = jTextArea.getText();
                        if (!data.equalsIgnoreCase("")) {
                            indice.setIdIndice(ind.getIdIndice());
                            indice.setIndice(ind.getIndice());
                            indice.setTipo(ind.getTipo());
                            indice.setValor(data);
                        } else {
                            String arg = ind.getIndice().replace("_", " ");
                            arg = arg.toLowerCase();
                            char[] cs = arg.toCharArray();
                            char ch = cs[0];
                            cs[0] = Character.toUpperCase(ch);
                            arg = String.valueOf(cs);

                            throw new DW4JDesktopExcepcion("el " + arg + " no debe estar vacio");
                        }
                    } else {
                        indice.setIdIndice(ind.getIdIndice());
                        indice.setIndice(ind.getIndice());
                        indice.setTipo(ind.getTipo());
                        indice.setValor(jTextArea.getText());
                    }
                }
                expeWS.getIndices().add(indice);

            }

            expeWS.setExpediente(expediente.getIdExpediente().trim());
            expeWS.setIdLibreria(idLibreria);
            expeWS.setIdCategoria(idCategoria);

            exito = new GestionExpediente().archivarExpediente(expeWS);

            if (exito) {
                dispose();
                digitalizaDocumento.find();

            } else {
                JOptionPane.showMessageDialog(this, "Problema al Archivar el Expediente", "No se puede archivar", JOptionPane.ERROR_MESSAGE);
            }

        } catch (DW4JDesktopExcepcion ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
            traza.trace(ex.getMessage(), Level.ERROR, ex);
        } catch (SOAPException | SOAPFaultException | HeadlessException ex) {
            JOptionPane.showMessageDialog(this, "Error en la creacion del expediente \n" + ex.getMessage(), "No se puede crear...", JOptionPane.ERROR_MESSAGE);
            traza.trace("Error en la creacion del expediente", Level.ERROR, ex);
        }
    }

    /**
     * Cierra esta ventana y va a la de subcategoria
     *
     * @param evt
     */
    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        dispose();

}//GEN-LAST:event_jbCancelarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JLabel jlMensajeCategoria;
    private javax.swing.JLabel jlMensajeLibreria;
    private javax.swing.JLabel jlMensajeSubCategoria;
    private javax.swing.JLabel jlTituloLibreria;
    private javax.swing.JLabel jlTituloLibreria1;
    private javax.swing.JLabel jlTituloLibreria2;
    private javax.swing.JPanel panelIndices;
    // End of variables declaration//GEN-END:variables

    /**
     * Coloca valor a la lista de indices dinamicos
     *
     * @param indices Lista con los valores
     */
    public void setIndices(List<Indice> indices) {
        this.indices = indices;
    }

}
