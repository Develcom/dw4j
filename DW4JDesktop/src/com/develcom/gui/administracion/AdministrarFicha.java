/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.develcom.gui.administracion;

import com.develcom.administracion.Categoria;
import com.develcom.administracion.Libreria;
import com.develcom.administracion.SubCategoria;
import com.develcom.administracion.TipoDocumento;
import com.develcom.gui.Principal;
import com.develcom.gui.tools.CentraVentanas;
import com.develcom.tools.trazas.Traza;
import java.awt.HeadlessException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.xml.soap.SOAPException;
import javax.xml.ws.soap.SOAPFaultException;
import org.apache.log4j.Level;
import ve.com.develcom.administracion.AdministracionBusqueda;
import ve.com.develcom.administracion.AdministracionModifica;

/**
 *
 * @author develcom
 */
public class AdministrarFicha extends javax.swing.JInternalFrame {

    private static final long serialVersionUID = 1803216205078621360L;
    private Traza traza = new Traza(AdministrarFicha.class);
    private List<Libreria> librerias;
    private List<Categoria> categorias;
    private List<SubCategoria> subCategorias;
    private List<TipoDocumento> tipoDocumentos;

    /**
     * Creates new form AdministrarFicha
     */
    public AdministrarFicha() {
        initComponents();
        llenarComboLibreria();
        CentraVentanas.centrar(this, Principal.desktop);
        setVisible(true);
    }
    
    
    private void llenarComboLibreria() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            model.addElement("");


            librerias = new AdministracionBusqueda().buscarLibreria("", 0);

            traza.trace("buscando las libreria ", Level.INFO);
            if (!librerias.isEmpty()) {
                for (Libreria l : librerias) {
                    model.addElement(l.getDescripcion());
                }
                cmbLibreria.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "Problemas al llenar la lista desplegable de las Librerias", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    private void llenarComboTipoDoc() {

        String categoria;
        String subCategoria;
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {

            categoria = cmbCategoria.getSelectedItem().toString();
            subCategoria = cmbSubCategoria.getSelectedItem().toString();

            traza.trace("Categoria seleccionada " + categoria, Level.INFO);
            traza.trace("SubCategoria seleccionada " + subCategoria, Level.INFO);

            model.addElement("");

            for (SubCategoria subCate : subCategorias) {

                if (subCategoria.equalsIgnoreCase(subCate.getSubCategoria())) {
                    String sb = subCate.getSubCategoria();
                    int idCat = subCate.getIdCategoria();
                    int idSubCat = subCate.getIdSubCategoria();

                    traza.trace("buscando los Tipos Documentos de la SubCategoria: " + subCategoria, Level.INFO);
                    traza.trace("id de la categoria: " + idCat, Level.INFO);
                    traza.trace("id de la subCategoria: " + idSubCat, Level.INFO);
                    
                    tipoDocumentos = new AdministracionBusqueda().buscarTipoDocumento("", idCat, idSubCat);

                    for (TipoDocumento td : tipoDocumentos) {
                        model.addElement(td.getTipoDocumento());
                    }
                    cmbTipoDoc.setModel(model);

                }
            }

        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbTipoDoc = new javax.swing.JComboBox();
        jbAceptar = new javax.swing.JButton();
        jbCerrar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cmbLibreria = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbCategoria = new javax.swing.JComboBox();
        cmbSubCategoria = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(224, 239, 255));
        setTitle("Foto Ficha");

        jPanel1.setBackground(new java.awt.Color(224, 239, 255));

        jLabel1.setText("Seleccione el Tipo de Documental correspondiente a la foto");

        jbAceptar.setText("Aceptar");
        jbAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAceptarActionPerformed(evt);
            }
        });

        jbCerrar.setText("Cerrar");
        jbCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbTipoDoc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jbAceptar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbCerrar)
                .addGap(72, 72, 72))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbTipoDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAceptar)
                    .addComponent(jbCerrar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(224, 239, 255));

        cmbLibreria.setPreferredSize(new java.awt.Dimension(400, 20));
        cmbLibreria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLibreriaActionPerformed(evt);
            }
        });

        jLabel2.setText("Librerias");

        jLabel3.setText("Categorias");

        cmbCategoria.setPreferredSize(new java.awt.Dimension(400, 20));
        cmbCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoriaActionPerformed(evt);
            }
        });

        cmbSubCategoria.setPreferredSize(new java.awt.Dimension(400, 20));
        cmbSubCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSubCategoriaActionPerformed(evt);
            }
        });

        jLabel4.setText("SubCategorias");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbLibreria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSubCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbLibreria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSubCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAceptarActionPerformed

        String nombre;
        TipoDocumento tipoDocumento;
        boolean resp = false;
        int idTipoDoc = 0;

        try {
            nombre = cmbTipoDoc.getSelectedItem().toString();
            //tipoDocumento = new AdministracionBusqueda().buscarTipoDocumento(nombre, 0, 0).get(0);

            if (!nombre.equals("")) {
                for (TipoDocumento td : tipoDocumentos) {
                    if (nombre.equalsIgnoreCase(td.getTipoDocumento())) {
                        idTipoDoc = td.getIdTipoDocumento();
                        break;
                    }
                }
                resp = new AdministracionModifica().agregaTipoDocumentoFoto(idTipoDoc);
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un Tipo de Documento", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }

//            if(tipoDocumento.getIdTipoDocumento() > 0){
//                resp = new AdministracionModifica().agregaTipoDocumentoFoto(tipoDocumento.getIdTipoDocumento());
//            }else{
//                JOptionPane.showMessageDialog(this, "Nombre del Tipo de Documento no encontrado\npor favor compruebe bien el nombre", "Advertencia", JOptionPane.WARNING_MESSAGE);
//            }
            if (resp) {
                JOptionPane.showMessageDialog(this, "Tipo de Documento " + nombre + " configurado con exito", "Indormacion", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Problemas al configurar el Tipo de Documento " + nombre, "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SOAPException | SOAPFaultException | HeadlessException e) {
            traza.trace("error en la configuracion de la ficha del expediente", Level.ERROR, e);
            JOptionPane.showMessageDialog(this, "Error en la configuracio de la ficha del expediente\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jbAceptarActionPerformed

    private void jbCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_jbCerrarActionPerformed

    private void cmbLibreriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLibreriaActionPerformed

        String lib = cmbLibreria.getSelectedItem().toString();
        cmbLibreria.setSelectedItem(lib);

        for (Libreria li : librerias) {
            if (lib.equalsIgnoreCase(li.getDescripcion())) {
                traza.trace("libreria selecionada " + li.getDescripcion() + " su id es " + li.getIdLibreria(), Level.INFO);
                llenarComboCategoria(li.getDescripcion(), li.getIdLibreria());
                break;
            }
        }
    }//GEN-LAST:event_cmbLibreriaActionPerformed

    /**
     * Llena la lista desplegable con las categorias desde el evento
     * ItemStateChanged de la lista desplegable de las Librerias
     *
     * @param lib el nombre de la Libreria
     * @param idLib el id de la Libreria
     */
    private void llenarComboCategoria(String lib, int idLib) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            model.addElement("");

            traza.trace("buscando las Categorias de la libreria: " + lib, Level.INFO);
            traza.trace("id de la Libreria: " + idLib, Level.INFO);
            cmbCategoria.setSelectedItem("");

            cmbSubCategoria.setModel(new DefaultComboBoxModel());

            categorias = new AdministracionBusqueda().buscarCategoria("", idLib, 0);

            if (!categorias.isEmpty()) {
                for (Categoria ca : categorias) {
                    if (ca.getEstatus().equalsIgnoreCase("Activo")) {
                        model.addElement(ca.getCategoria());
                    }
                }
                cmbCategoria.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "La libreria " + lib + " no posee categorias", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    private void cmbCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoriaActionPerformed

        String categoria = cmbCategoria.getSelectedItem().toString();

        traza.trace("Categoria seleccionada " + categoria, Level.INFO);

        for (Categoria cat : categorias) {
            if (categoria.equalsIgnoreCase(cat.getCategoria())) {
                llenarComboSubCategoria(cat.getCategoria(), cat.getIdCategoria());
                break;
            }
        }
    }//GEN-LAST:event_cmbCategoriaActionPerformed

    /**
     *
     *
     * @param cat el nombre de la Categoria
     * @param idCat el id de la categoria
     */
    private void llenarComboSubCategoria(String cat, int idCat) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            model.addElement("");

            traza.trace("buscando las SubCategorias de la Categorias: " + cat, Level.INFO);
            traza.trace("id de la categoria: " + idCat, Level.INFO);
            cmbSubCategoria.setSelectedItem("");

            subCategorias = new AdministracionBusqueda().buscarSubCategoria("", idCat, 0);

            if (!subCategorias.isEmpty()) {
                for (SubCategoria subca : subCategorias) {
                    if (subca.getEstatus().equalsIgnoreCase("Activo")) {
                        model.addElement(subca.getSubCategoria());
                    }
                }
                cmbSubCategoria.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "La categoria " + cat + " no posee subcategorias", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    private void cmbSubCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSubCategoriaActionPerformed
        llenarComboTipoDoc();
    }//GEN-LAST:event_cmbSubCategoriaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbCategoria;
    private javax.swing.JComboBox cmbLibreria;
    private javax.swing.JComboBox cmbSubCategoria;
    private javax.swing.JComboBox cmbTipoDoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbAceptar;
    private javax.swing.JButton jbCerrar;
    // End of variables declaration//GEN-END:variables
}
