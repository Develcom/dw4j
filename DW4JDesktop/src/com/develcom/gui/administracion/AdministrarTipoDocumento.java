/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AdministrarTipoDocumento.java
 *
 * Created on 21/03/2012, 08:37:07 AM
 */
package com.develcom.gui.administracion;

import com.develcom.administracion.Categoria;
import com.develcom.administracion.Libreria;
import com.develcom.administracion.Perfil;
import com.develcom.administracion.SubCategoria;
import com.develcom.administracion.TipoDocumento;
import com.develcom.gui.Principal;
import com.develcom.gui.tools.CentraVentanas;
import com.develcom.gui.tools.ModeloTabla;
import com.develcom.tools.trazas.Traza;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.soap.SOAPException;
import javax.xml.ws.soap.SOAPFaultException;
import org.apache.log4j.Level;
import ve.com.develcom.administracion.AdministracionAgregar;
import ve.com.develcom.administracion.AdministracionBusqueda;

/**
 *
 * @author develcom
 */
public class AdministrarTipoDocumento extends javax.swing.JInternalFrame {

    /**
     * Modelo para la tabla
     */
    private ModeloTabla modelTable;
    /**
     * Modelo para la tabla de tipos de documentos existentes
     */
    private ModeloTabla modelTableExitentes;
    /**
     * Escribe las trazas en el log
     */
    private Traza traza = new Traza(AdministrarTipoDocumento.class);
    /**
     * Lista de Librerias
     */
    private List<Libreria> librerias;
    /**
     * Lista de Categorias
     */
    private List<Categoria> categorias;
    /**
     * *
     * Lista de SubCategorias
     */
    private List<SubCategoria> subCategorias;
    /**
     * Lista Tipos Documrntos
     */
    private List<TipoDocumento> listaTipoDocumentos;
    /**
     * Para modificacion de tipos de documentos
     */
    private boolean existe = false;

    /**
     * Construtor, inicia los componentes y llena la lista desplegable de las
     * librerias
     */
    public AdministrarTipoDocumento() {
        initComponents();

        grupoBotonesEstatus.add(jrbActivo);
        grupoBotonesEstatus.add(jrbInactivo);

        tablaTipoDocumento.setModel(armarTabla());
        tablaExistentes.setModel(armarTablaExistentes());

        llenarComboLibreria();
        limpiarComponentes();
        CentraVentanas.centrar(this, Principal.desktop);
        setVisible(true);
    }

    /**
     * Llena la lista desplegables con las Librerias
     */
    private void llenarComboLibreria() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            model.addElement("");


            librerias = new AdministracionBusqueda().buscarLibreria("", 0);

            traza.trace("buscando las libreria ", Level.INFO);
            if (!librerias.isEmpty()) {
                for (Libreria l : librerias) {
                    model.addElement(l.getDescripcion());
                }
                cmbLibreria.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "Problemas al llenar la lista desplegable de las Librerias", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    /**
     * Coloca los titulos a la tabala
     *
     * @return retorna un DefaultTableModel
     */
    private DefaultTableModel armarTabla() {

        modelTable = new ModeloTabla();

        modelTable.addColumn("Libreria");
        modelTable.addColumn("Categoria");
        modelTable.addColumn("SubCategoria");
        modelTable.addColumn("TipoDocumento");
        modelTable.addColumn("Vencimiento");
        modelTable.addColumn("Dato Adicional");
        modelTable.addColumn("Estatus");

        return modelTable;

    }

    /**
     * Coloca los titulos a la tabla
     *
     * @return retorna un DefaultTableModel
     */
    private DefaultTableModel armarTablaExistentes() {

        modelTableExitentes = new ModeloTabla();

        modelTableExitentes.addColumn("Tipo Documento");
        modelTableExitentes.addColumn("Estatus");
        modelTableExitentes.addColumn("Vencimiento");
        modelTableExitentes.addColumn("Dato Adicional");

        return modelTableExitentes;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotonesEstatus = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        cmbLibreria = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbCategoria = new javax.swing.JComboBox();
        cmbSubCategoria = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        panelInferior = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        lblTipoDocumento = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaExistentes = new javax.swing.JTable();
        jbCambioEstatus = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtTipoDocumento = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jrbActivo = new javax.swing.JRadioButton();
        jrbInactivo = new javax.swing.JRadioButton();
        chkVencimiento = new javax.swing.JCheckBox();
        jbAgregar = new javax.swing.JButton();
        chkAdicional = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jbCancelar = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaTipoDocumento = new javax.swing.JTable();

        setBackground(new java.awt.Color(224, 239, 255));
        setTitle("Administrar Tipos de Documentos");

        jPanel2.setBackground(new java.awt.Color(224, 239, 255));

        cmbLibreria.setPreferredSize(new java.awt.Dimension(400, 20));
        cmbLibreria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLibreriaActionPerformed(evt);
            }
        });

        jLabel2.setText("Librerias");

        jLabel3.setText("Categorias");

        cmbCategoria.setPreferredSize(new java.awt.Dimension(400, 20));
        cmbCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoriaActionPerformed(evt);
            }
        });

        cmbSubCategoria.setPreferredSize(new java.awt.Dimension(400, 20));
        cmbSubCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSubCategoriaActionPerformed(evt);
            }
        });

        jLabel4.setText("SubCategorias");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbLibreria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSubCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbLibreria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSubCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        panelInferior.setBackground(new java.awt.Color(224, 239, 255));

        javax.swing.GroupLayout panelInferiorLayout = new javax.swing.GroupLayout(panelInferior);
        panelInferior.setLayout(panelInferiorLayout);
        panelInferiorLayout.setHorizontalGroup(
            panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelInferiorLayout.setVerticalGroup(
            panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 238, Short.MAX_VALUE)
        );

        jScrollPane1.setBorder(null);

        jPanel4.setBackground(new java.awt.Color(224, 239, 255));

        lblTipoDocumento.setText("Tipos de Documentos existentes");

        tablaExistentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane3.setViewportView(tablaExistentes);

        jbCambioEstatus.setText("Cambiar de Estatus");
        jbCambioEstatus.setToolTipText("Cambiar de Estatus");
        jbCambioEstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCambioEstatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCambioEstatus))
                    .addComponent(lblTipoDocumento))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTipoDocumento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbCambioEstatus)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel4);

        jPanel1.setBackground(new java.awt.Color(224, 239, 255));

        jLabel6.setText("Nombre del Tipo de Documento");

        txtTipoDocumento.setToolTipText("");

        jLabel5.setText("Estatus");

        jrbActivo.setBackground(new java.awt.Color(224, 239, 255));
        jrbActivo.setSelected(true);
        jrbActivo.setText("Activo");

        jrbInactivo.setBackground(new java.awt.Color(224, 239, 255));
        jrbInactivo.setText("Inactivo");

        chkVencimiento.setBackground(new java.awt.Color(224, 239, 255));
        chkVencimiento.setText("¿Tiene vencimiento?");

        jbAgregar.setText("Agregar");
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });

        chkAdicional.setBackground(new java.awt.Color(224, 239, 255));
        chkAdicional.setText("¿Datos Adicionales?");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jrbActivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbInactivo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chkAdicional, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkVencimiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jbAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkVencimiento))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jrbActivo)
                    .addComponent(jrbInactivo)
                    .addComponent(chkAdicional)
                    .addComponent(jbAgregar))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(224, 239, 255));

        jbCancelar.setText("Cerrar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbSalvar.setText("Guardar");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        tablaTipoDocumento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jScrollPane2.setViewportView(tablaTipoDocumento);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jbSalvar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbCancelar)
                .addGap(128, 128, 128))
            .addComponent(jScrollPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalvar)
                    .addComponent(jbCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(panelInferior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(panelInferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Agrega las subcategorias a la tabla
     */
    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
        agregarTipoDocumento();
}//GEN-LAST:event_jbAgregarActionPerformed

    /**
     * Agrega las subcategorias a la tabla
     */
    private void agregarTipoDocumento() {
        String tipoDocumento, subCategoria, categoria, libreria, vencimiento, datoAdicional, estatus = "";
        Vector filas = new Vector();
        Vector ver;
        boolean banLista = true, banTabla = true;

        libreria = cmbLibreria.getSelectedItem().toString();
        categoria = cmbCategoria.getSelectedItem().toString();
        subCategoria = cmbSubCategoria.getSelectedItem().toString();
        tipoDocumento = txtTipoDocumento.getText();

        if (jrbActivo.isSelected()) {
            estatus = jrbActivo.getText();
        } else if (jrbInactivo.isSelected()) {
            estatus = jrbInactivo.getText();
        }

        if (!libreria.equalsIgnoreCase("")) {

            if (!categoria.equalsIgnoreCase("")) {

                if (!subCategoria.equalsIgnoreCase("")) {

                    if (!tipoDocumento.equalsIgnoreCase("")) {

                        for (TipoDocumento tipoDoc : listaTipoDocumentos) {
                            String td = tipoDoc.getTipoDocumento().trim();
                            if (td.equalsIgnoreCase(tipoDocumento)) {
                                banLista = false;
                                break;
                            } else {
                                banLista = true;
                            }
                        }

                        if (modelTable != null) {
                            ver = modelTable.getDataVector();
                            for (int i = 0; i < ver.size(); i++) {
                                Vector d = (Vector) ver.get(i);
                                String td = d.get(3).toString();
                                if (td.equalsIgnoreCase(tipoDocumento)) {
                                    banTabla = false;
                                    break;
                                }
                            }
                        }

                        if (banTabla) {
                            if (banLista) {

                                filas.add(libreria);
                                filas.add(categoria);
                                filas.add(subCategoria);
                                filas.add(tipoDocumento);

                                if (chkVencimiento.isSelected()) {
                                    vencimiento = "si";
                                } else {
                                    vencimiento = "no";
                                }

                                if (chkAdicional.isSelected()) {
                                    datoAdicional = "si";
                                } else {
                                    datoAdicional = "no";
                                }
                                filas.add(vencimiento);
                                filas.add(datoAdicional);
                                filas.add(estatus);
                                modelTable.addRow(filas);
                                tablaTipoDocumento.setModel(modelTable);
                                txtTipoDocumento.setText("");
                                txtTipoDocumento.setEditable(true);
                                jrbActivo.setSelected(true);

                            } else {
                                //JOptionPane.showMessageDialog(this, "Ya el Tipo de Documento se encuentra en la lista", "Advertencia", JOptionPane.WARNING_MESSAGE);

                                int n = JOptionPane.showOptionDialog(this, "Ya el Tipo de Documento se encuentra en la lista de existentes \n ¿desea modificarlo?",
                                        "¿?",
                                        JOptionPane.YES_NO_OPTION,
                                        JOptionPane.QUESTION_MESSAGE,
                                        null, new Object[]{"SI", "NO"}, "NO");

                                if (n == JOptionPane.YES_OPTION) {

                                    filas.add(libreria);
                                    filas.add(categoria);
                                    filas.add(subCategoria);
                                    filas.add(tipoDocumento);

                                    if (chkVencimiento.isSelected()) {
                                        vencimiento = "si";
                                    } else {
                                        vencimiento = "no";
                                    }

                                    if (chkAdicional.isSelected()) {
                                        datoAdicional = "si";
                                    } else {
                                        datoAdicional = "no";
                                    }
                                    filas.add(vencimiento);
                                    filas.add(datoAdicional);
                                    filas.add(estatus);
                                    modelTable.addRow(filas);
                                    tablaTipoDocumento.setModel(modelTable);
                                    txtTipoDocumento.setText("");
                                    txtTipoDocumento.setEditable(true);
                                    jrbActivo.setSelected(true);

                                } else {
                                    txtTipoDocumento.setText("");
                                    txtTipoDocumento.setEditable(true);
                                }
                            }
                            chkVencimiento.setSelected(false);
                            chkAdicional.setSelected(false);
                        } else {
                            JOptionPane.showMessageDialog(this, "Ya el Tipo de Documento se encuentra en la tabla", "Advertencia", JOptionPane.WARNING_MESSAGE);
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Debe colocar un Tipo de Documento", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Debe seleccionar SubCategoria", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una Categoria", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una libreria", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * Guarda los tipos de documentos
     */
    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        guardarTipoDocumento();
}//GEN-LAST:event_jbSalvarActionPerformed

    /**
     * Guarda los tipos de documentos
     */
    private void guardarTipoDocumento() {

        DefaultTableModel md;
        List<Perfil> tiposDocumentos = new ArrayList<Perfil>();
        Perfil tipoDocumento;
        Categoria cat;
        Libreria lib;
        SubCategoria subCat;
        TipoDocumento tipoDoc;
        Vector tiposDocs;
        boolean resp = false;

        try {
            md = (DefaultTableModel) tablaTipoDocumento.getModel();
            tiposDocs = md.getDataVector();


            int n = JOptionPane.showOptionDialog(this, "Seguro que desea guardar los Tipos de Documentos",
                    "¿?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, new Object[]{"SI", "NO"}, "NO");

            if (n == JOptionPane.YES_OPTION) {

                if (!tiposDocs.isEmpty()) {

                    for (int i = 0; i < tiposDocs.size(); i++) {
                        Vector vTD = (Vector) tiposDocs.get(i);

                        tipoDocumento = new Perfil();
                        cat = new Categoria();
                        lib = new Libreria();
                        subCat = new SubCategoria();
                        tipoDoc = new TipoDocumento();

                        lib.setDescripcion(vTD.get(0).toString());
                        for (Libreria li : librerias) {
                            if (li.getDescripcion().equalsIgnoreCase(lib.getDescripcion())) {
                                lib.setIdLibreria(li.getIdLibreria());
                                if (li.getEstatus().equalsIgnoreCase("activo")) {
                                    lib.setEstatus("1");
                                } else if (li.getEstatus().equalsIgnoreCase("inactivo")) {
                                    lib.setEstatus("2");
                                }
                                break;
                            }
                        }

                        cat.setCategoria(vTD.get(1).toString());
                        for (Categoria ca : categorias) {
                            if (ca.getCategoria().equalsIgnoreCase(cat.getCategoria())) {
                                cat.setIdCategoria(ca.getIdCategoria());
                                if (ca.getEstatus().equalsIgnoreCase("activo")) {
                                    cat.setEstatus("1");
                                } else if (ca.getEstatus().equalsIgnoreCase("inactivo")) {
                                    cat.setEstatus("2");
                                }
                                break;
                            }
                        }

                        subCat.setSubCategoria(vTD.get(2).toString());
                        subCat.setEstatus("1");
                        for (SubCategoria sc : subCategorias) {
                            if (sc.getSubCategoria().equalsIgnoreCase(subCat.getSubCategoria())) {
                                subCat.setIdSubCategoria(sc.getIdSubCategoria());
                                if (sc.getEstatus().equalsIgnoreCase("activo")) {
                                    subCat.setEstatus("1");
                                } else if (sc.getEstatus().equalsIgnoreCase("inactivo")) {
                                    subCat.setEstatus("2");
                                }
                                break;
                            }
                        }

                        tipoDoc.setTipoDocumento(vTD.get(3).toString());


                        if (vTD.get(4).toString().equalsIgnoreCase("si")) {
                            tipoDoc.setVencimiento("1");
                        } else {
                            tipoDoc.setVencimiento("0");
                        }


                        if (vTD.get(5).toString().equalsIgnoreCase("si")) {
                            tipoDoc.setDatoAdicional("1");
                        } else {
                            tipoDoc.setDatoAdicional("0");
                        }

                        if (vTD.get(6).toString().equalsIgnoreCase(jrbActivo.getText())) {
                            tipoDoc.setEstatus("1");
                        } else if (vTD.get(6).toString().equalsIgnoreCase(jrbInactivo.getText())) {
                            tipoDoc.setEstatus("2");
                        }
                        tipoDoc.setIdCategoria(cat.getIdCategoria());
                        tipoDoc.setIdSubCategoria(subCat.getIdSubCategoria());


                        for (TipoDocumento td : listaTipoDocumentos) {
                            if (tipoDoc.getTipoDocumento().equalsIgnoreCase(td.getTipoDocumento())) {
                                tipoDoc.setIdTipoDocumento(td.getIdTipoDocumento());
                            }
                        }

                        tipoDocumento.setLibreria(lib);
                        tipoDocumento.setCategoria(cat);
                        tipoDocumento.setSubCategoria(subCat);
                        tipoDocumento.setTipoDocumento(tipoDoc);

                        tiposDocumentos.add(tipoDocumento);
                    }

                    resp = new AdministracionAgregar().insertaTipoDocumento(tiposDocumentos);

                    if (resp) {
                        JOptionPane.showMessageDialog(this, "Tipos de Documentos guardados con exito", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                        limpiarComponentes();
                    } else {
                        JOptionPane.showMessageDialog(this, "Problemas al guardar los Tipos de Documentos", "Advertencia", JOptionPane.WARNING_MESSAGE);
                        limpiarComponentes();
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "La tabla de Tipos de Documentos esta vacia", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }

    }

    /**
     * Cierra la ventana
     *
     * @param evt
     */
    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed

        this.dispose();
}//GEN-LAST:event_jbCancelarActionPerformed

    /**
     * Llena la lista desplegable con las categorias desde el evento
     * ItemStateChanged de la lista desplegable de las Librerias
     *
     * @param evt
     */
    private void cmbLibreriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLibreriaActionPerformed

        String lib = cmbLibreria.getSelectedItem().toString();
        limpiarComponentes();
        cmbLibreria.setSelectedItem(lib);

        for (Libreria li : librerias) {
            if (lib.equalsIgnoreCase(li.getDescripcion())) {
                traza.trace("libreria selecionada " + li.getDescripcion() + " su id es " + li.getIdLibreria(), Level.INFO);
                llenarComboCategoria(li.getDescripcion(), li.getIdLibreria());
                break;
            }
        }

    }//GEN-LAST:event_cmbLibreriaActionPerformed

    /**
     * Llena la lista desplegable con las categorias desde el evento
     * ItemStateChanged de la lista desplegable de las Librerias
     *
     * @param lib el nombre de la Libreria
     * @param idLib el id de la Libreria
     */
    private void llenarComboCategoria(String lib, int idLib) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            model.addElement("");

            traza.trace("buscando las Categorias de la libreria: " + lib, Level.INFO);
            traza.trace("id de la Libreria: " + idLib, Level.INFO);
            cmbCategoria.setSelectedItem("");

            cmbSubCategoria.setModel(new DefaultComboBoxModel());

            categorias = new AdministracionBusqueda().buscarCategoria("", idLib, 0);

            if (!categorias.isEmpty()) {
                for (Categoria ca : categorias) {
                    if(ca.getEstatus().equalsIgnoreCase("Activo")){
                        model.addElement(ca.getCategoria());
                    }      
                }
                cmbCategoria.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "La libreria " + lib + " no posee categorias", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    /**
     * Llena la lista desplegable con las categorias desde el evento
     * ItemStateChanged de la lista desplegable de las Librerias
     *
     * @param evt
     */
    private void cmbCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoriaActionPerformed

        String categoria = cmbCategoria.getSelectedItem().toString();

        tablaExistentes.setModel(armarTablaExistentes());
        tablaTipoDocumento.setModel(armarTabla());

        traza.trace("Categoria seleccionada " + categoria, Level.INFO);

        for (Categoria cat : categorias) {
            if (categoria.equalsIgnoreCase(cat.getCategoria())) {
                llenarComboSubCategoria(cat.getCategoria(), cat.getIdCategoria());
                break;
            }
        }

    }//GEN-LAST:event_cmbCategoriaActionPerformed

    /**
     *
     *
     * @param cat el nombre de la Categoria
     * @param idCat el id de la categoria
     */
    private void llenarComboSubCategoria(String cat, int idCat) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            model.addElement("");

            traza.trace("buscando las SubCategorias de la Categorias: " + cat, Level.INFO);
            traza.trace("id de la categoria: " + idCat, Level.INFO);
            cmbSubCategoria.setSelectedItem("");

            subCategorias = new AdministracionBusqueda().buscarSubCategoria("", idCat, 0);

            if (!subCategorias.isEmpty()) {
                for (SubCategoria subca : subCategorias) {
                    if(subca.getEstatus().equalsIgnoreCase("Activo")){
                        model.addElement(subca.getSubCategoria());
                    }
                }
                cmbSubCategoria.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "La categoria " + cat + " no posee subcategorias", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    private void cmbSubCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSubCategoriaActionPerformed
        llenarTablaTipoDocumento();
    }//GEN-LAST:event_cmbSubCategoriaActionPerformed

    /**
     * Llena la lista con los Tipos Documentos desde el evento ItemStateChanged
     * de la lista desplegable de las Categorias
     */
    private void llenarTablaTipoDocumento() {

        Vector filas;
        String categoria;
        String subCategoria;

        try {

            categoria = cmbCategoria.getSelectedItem().toString();
            subCategoria = cmbSubCategoria.getSelectedItem().toString();

            traza.trace("Categoria seleccionada " + categoria, Level.INFO);
            traza.trace("SubCategoria seleccionada " + subCategoria, Level.INFO);

            tablaTipoDocumento.setModel(armarTabla());
            tablaExistentes.setModel(armarTablaExistentes());

            for (SubCategoria subCate : subCategorias) {
                if (subCategoria.equalsIgnoreCase(subCate.getSubCategoria())) {
                    String sb = subCate.getSubCategoria();
                    int idCat = subCate.getIdCategoria();
                    int idSubCat = subCate.getIdSubCategoria();

                    traza.trace("buscando los Tipos Documentos de la SubCategoria: " + subCategoria, Level.INFO);
                    traza.trace("id de la categoria: " + idCat, Level.INFO);
                    traza.trace("id de la subCategoria: " + idSubCat, Level.INFO);


                    listaTipoDocumentos = new AdministracionBusqueda().buscarTipoDocumento("", idCat, idSubCat);

                    if (!listaTipoDocumentos.isEmpty()) {
                        for (TipoDocumento td : listaTipoDocumentos) {
                            filas = new Vector();

                            filas.add(td.getTipoDocumento());
                            filas.add(td.getEstatus());
                            try {
                                if (td.getVencimiento().equalsIgnoreCase("1")) {
                                    filas.add("si");
                                } else {
                                    filas.add("no");
                                }
                            } catch (NullPointerException e) {
                                filas.add("no");
                            }
                            try {
                                if (td.getDatoAdicional().equalsIgnoreCase("1")) {
                                    filas.add("si");
                                } else {
                                    filas.add("no");
                                }
                            } catch (NullPointerException e) {
                                filas.add("no");
                            }
                            modelTableExitentes.addRow(filas);
                            tablaExistentes.setModel(modelTableExitentes);

                        }
                    }
                    break;

                }
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }

    }

    private void jbCambioEstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCambioEstatusActionPerformed

        try {
            //String tipoDoc = ((String) tablaExistentes.getValueAt(tablaExistentes.getSelectedRow(), tablaExistentes.getSelectedColumn()));
            String tipoDoc = ((String) tablaExistentes.getValueAt(tablaExistentes.getSelectedRow(), 0));

            txtTipoDocumento.setText(tipoDoc);
            txtTipoDocumento.setEditable(false);
        } catch (Exception e) {
            traza.trace("no seleccionó un tipo de documento", Level.INFO, e);
            JOptionPane.showMessageDialog(this, "Debe selecciona un tipo de documento", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
}//GEN-LAST:event_jbCambioEstatusActionPerformed

    /**
     * Limpia los componentes
     */
    private void limpiarComponentes() {

        txtTipoDocumento.setText("");
        llenarComboLibreria();
        cmbCategoria.setModel(new DefaultComboBoxModel());
        cmbSubCategoria.setModel(new DefaultComboBoxModel());

        grupoBotonesEstatus.clearSelection();
        jrbActivo.setSelected(true);

        tablaExistentes.setModel(armarTablaExistentes());
        tablaTipoDocumento.setModel(armarTabla());

        chkVencimiento.setSelected(false);
        chkAdicional.setSelected(false);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkAdicional;
    private javax.swing.JCheckBox chkVencimiento;
    private javax.swing.JComboBox cmbCategoria;
    private javax.swing.JComboBox cmbLibreria;
    private javax.swing.JComboBox cmbSubCategoria;
    private javax.swing.ButtonGroup grupoBotonesEstatus;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JButton jbCambioEstatus;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JRadioButton jrbActivo;
    private javax.swing.JRadioButton jrbInactivo;
    private javax.swing.JLabel lblTipoDocumento;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JTable tablaExistentes;
    private javax.swing.JTable tablaTipoDocumento;
    private javax.swing.JTextField txtTipoDocumento;
    // End of variables declaration//GEN-END:variables
}
