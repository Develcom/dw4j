/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AdministrarCombo.java
 *
 * Created on 26/03/2012, 10:03:16 AM
 */
package com.develcom.gui.administracion;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Level;
import ve.com.develcom.administracion.AdministracionAgregar;
import ve.com.develcom.administracion.AdministracionBusqueda;
import com.develcom.administracion.Categoria;
import com.develcom.administracion.Combo;
import com.develcom.administracion.DatoAdicional;
import com.develcom.administracion.Libreria;
import com.develcom.administracion.SubCategoria;
import com.develcom.administracion.TipoDocumento;
import com.develcom.excepcion.DW4JDesktopExcepcion;
import com.develcom.gui.Principal;
import com.develcom.gui.tools.CentraVentanas;
import com.develcom.gui.tools.ModeloTabla;
import com.develcom.tools.trazas.Traza;
import javax.xml.soap.SOAPException;
import javax.xml.ws.soap.SOAPFaultException;

/**
 *
 * @author develcom
 */
public class AdministrarComboDatosAdicionales extends javax.swing.JInternalFrame {

    /**
     * modelo para la tabla
     */
    private ModeloTabla modelTable;// = new DefaultTableModel();
    /**
     * Escribe trazas en el log
     */
    private Traza traza = new Traza(AdministrarComboDatosAdicionales.class);
    /**
     * Lista de Librerias
     */
    private List<Libreria> librerias;
    /**
     * Lista de Categorias
     */
    private List<Categoria> categorias;
    /**
     * *
     * Lista de SubCategorias
     */
    private List<SubCategoria> subCategorias;
    /**
     * Lista Tipos Documrntos
     */
    private List<TipoDocumento> listaTipoDocumentos;
    /**
     * Lista de Argumentos
     */
    private List<DatoAdicional> datosAdicionales;
    /**
     * Lista de Argumentos
     */
    private List<DatoAdicional> lstIndiceDACombos = new ArrayList<DatoAdicional>();
    /**
     * Bandera para verificar que ya existes datos
     */
    private boolean existe = false;
    /**
     * Lista con los datos del indice seleccionado
     */
    private List<Combo> datosExistentes;
    /**
     * Datos a modificar
     */
    private HashMap<String, Integer> datExistentes = new HashMap<String, Integer>();
    private List<Combo> tmpDatos = new ArrayList<Combo>();

    /**
     * Bandera si hay datos nuevos
     */
    //private List<Combo> combosNEW = new ArrayList<Combo>();
    /**
     * Creates new form AdministrarCombo
     */
    public AdministrarComboDatosAdicionales() {
        initComponents();

        tablaCombo.setModel(armarTabla());
        llenarComboLibreria();
        setTitle("Administra Listas Desplegables de Datos Adicionales");
        CentraVentanas.centrar(this, Principal.desktop);
        setVisible(true);
    }

    /**
     * Coloca los titulos a la tablas
     *
     * @return DefaultTableModel
     */
    private DefaultTableModel armarTabla() {

        if (modelTable == null) {
            modelTable = new ModeloTabla();

            modelTable.addColumn("Id Indice");
            modelTable.addColumn("Indice");
            modelTable.addColumn("Dato");
        } else {
            modelTable.eliminarFilas();
        }

        return modelTable;
    }

    /**
     * Llena la lista desplegable de las Librerias
     */
    private void llenarComboLibreria() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        try {
            model.addElement("");

            categorias = null;

            librerias = new AdministracionBusqueda().buscarLibreria("", 0);

            traza.trace("buscando las libreria ", Level.INFO);

            for (Libreria l : librerias) {
                model.addElement(l.getDescripcion());
            }
            cmbLibreria.setModel(model);
        } catch (SOAPException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSuperior2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmbCategoria = new javax.swing.JComboBox();
        cmbLibreria = new javax.swing.JComboBox();
        cmbIndice = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbSubCategoria = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbTipoDoc = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        panelInferior = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCombo = new javax.swing.JTable();
        jbSalvar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDatos = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        txtDato = new javax.swing.JTextField();
        jbAgregar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jbModificar = new javax.swing.JButton();

        setBackground(new java.awt.Color(224, 239, 255));

        panelSuperior2.setBackground(new java.awt.Color(224, 239, 255));

        jLabel2.setText("Categoria");

        cmbCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoriaActionPerformed(evt);
            }
        });

        cmbLibreria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLibreriaActionPerformed(evt);
            }
        });

        cmbIndice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbIndiceActionPerformed(evt);
            }
        });

        jLabel1.setText("Libreria");

        jLabel3.setText("Indice");

        cmbSubCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSubCategoriaActionPerformed(evt);
            }
        });

        jLabel5.setText("SubCategoria");

        cmbTipoDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoDocActionPerformed(evt);
            }
        });

        jLabel7.setText("Tipo de Documento");

        javax.swing.GroupLayout panelSuperior2Layout = new javax.swing.GroupLayout(panelSuperior2);
        panelSuperior2.setLayout(panelSuperior2Layout);
        panelSuperior2Layout.setHorizontalGroup(
            panelSuperior2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperior2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panelSuperior2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSuperior2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbIndice, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbCategoria, 0, 403, Short.MAX_VALUE)
                    .addComponent(cmbLibreria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbSubCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbTipoDoc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelSuperior2Layout.setVerticalGroup(
            panelSuperior2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperior2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSuperior2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbLibreria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSuperior2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSuperior2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSubCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSuperior2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTipoDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSuperior2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbIndice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelInferior.setBackground(new java.awt.Color(224, 239, 255));

        tablaCombo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jScrollPane2.setViewportView(tablaCombo);

        jbSalvar.setText("Guardar");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbCancelar.setText("Cerrar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInferiorLayout = new javax.swing.GroupLayout(panelInferior);
        panelInferior.setLayout(panelInferiorLayout);
        panelInferiorLayout.setHorizontalGroup(
            panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInferiorLayout.createSequentialGroup()
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInferiorLayout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jbSalvar)
                        .addGap(87, 87, 87)
                        .addComponent(jbCancelar))
                    .addGroup(panelInferiorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelInferiorLayout.setVerticalGroup(
            panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInferiorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalvar)
                    .addComponent(jbCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(224, 239, 255));

        listaDatos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listaDatos);

        jLabel6.setText("Valor");

        txtDato.setToolTipText("");

        jbAgregar.setText("Agregar");
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });

        jLabel4.setText("Datos del Indice");

        jbModificar.setText("Modificar");
        jbModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(41, 41, 41)
                                .addComponent(txtDato, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbModificar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAgregar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSuperior2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelInferior, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSuperior2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
        agregarDato();
        txtDato.setText("");
}//GEN-LAST:event_jbAgregarActionPerformed

    /**
     * Llena la tabla con los valores agregados
     */
    private void agregarDato() {

        Vector filas = new Vector();
        Vector ver;
        int idIndice;
        int[] cont;
        String dato, indice, categoria = "", libreria = "", tmp = "";
        boolean banLista = true, banListaSel = true, banTabla = true;

        try {

            try {
                libreria = cmbLibreria.getSelectedItem().toString();
            } catch (NullPointerException e) {
                throw new DW4JDesktopExcepcion("Debe seleccionar una libreria");
            }

            if (!libreria.equalsIgnoreCase("")) {

                try {
                    categoria = cmbCategoria.getSelectedItem().toString();
                } catch (NullPointerException e) {
                    throw new DW4JDesktopExcepcion("Debe seleccionar una categoria");
                }

                if (!categoria.equalsIgnoreCase("")) {

                    try {
                        indice = cmbIndice.getSelectedItem().toString();
                    } catch (NullPointerException e) {
                        throw new DW4JDesktopExcepcion("Debe seleccionar un indice");
                    }

                    if (!indice.equalsIgnoreCase("")) {

                        dato = txtDato.getText();

                        if (!dato.equalsIgnoreCase("")) {

                            if (existe) {
                                try {
                                    tmp = listaDatos.getSelectedValue().toString();
                                    for (Combo cbo : datosExistentes) {
                                        if (cbo.getDatoCombo().equalsIgnoreCase(tmp)) {
                                            datExistentes.put(dato, cbo.getIdCombo());
                                            banListaSel = false;
                                            break;
                                        } else {
                                            banListaSel = true;
                                        }
                                    }
                                    listaDatos.clearSelection();
                                } catch (NullPointerException e) {

                                    DefaultListModel model = (DefaultListModel) listaDatos.getModel();

                                    Object values[] = model.toArray();
                                    for (int i = 0; i < values.length; i++) {
                                        String data = values[i].toString();
                                        if (data.equalsIgnoreCase(dato)) {
                                            banLista = false;
                                            break;
                                        } else {
                                            banLista = true;
                                        }
                                    }
                                }
                            }

                            if (modelTable != null) {
                                ver = modelTable.getDataVector();
                                for (int i = 0; i < ver.size(); i++) {
                                    Vector d = (Vector) ver.get(i);
                                    String subCat = d.get(2).toString();
                                    if (subCat.equalsIgnoreCase(dato)) {
                                        banTabla = false;
                                        break;
                                    }
                                }
                            }

                            if (banLista) {

                                if (banTabla) {

//                                    if(banListaSel){
                                    for (DatoAdicional arg : lstIndiceDACombos) {
                                        if (arg.getIndiceDatoAdicional().equalsIgnoreCase(indice)) {
                                            idIndice = arg.getIdDatoAdicional();
                                            filas.add(idIndice);
                                            filas.add(indice);
                                            filas.add(dato);
                                            modelTable.addRow(filas);
                                            tablaCombo.setModel(modelTable);
                                            txtDato.setText("");
                                            break;
                                        }
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Ya el dato se encuentra en la tabla", "Advertencia", JOptionPane.WARNING_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Ya el dato se encuentra en la lista", "Advertencia", JOptionPane.WARNING_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Debe colocar un dato", "Advertencia", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Debe seleccionar un indice", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Debe seleccionar una categoria", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una libreria", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }

        } catch (DW4JDesktopExcepcion e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
            traza.trace("Error", Level.ERROR, e);
        } catch (Exception e) {
            traza.trace("Error general", Level.ERROR, e);
        }

    }

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        guardaDatos();
}//GEN-LAST:event_jbSalvarActionPerformed

    /**
     * Guarda los datos de la lista desplegable
     */
    private void guardaDatos() {

        Vector datos;
        List<Combo> combos = new ArrayList<Combo>();
        Combo combo;
        boolean resp;

        try {

            datos = modelTable.getDataVector();

            int n = JOptionPane.showOptionDialog(this, "Seguro que desea guardar los valores de la lista desplegable",
                    "¿?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, new Object[]{"SI", "NO"}, "NO");

            if (n == JOptionPane.YES_OPTION) {

                if (!datos.isEmpty()) {

                    for (int i = 0; i < datos.size(); i++) {
                        Vector vectorCombo = (Vector) datos.get(i);
                        combo = new Combo();

                        combo.setCodigoIndice(Integer.parseInt(vectorCombo.get(0).toString()));

                        combo.setIndice(vectorCombo.get(1).toString());

                        combo.setDatoCombo(vectorCombo.get(2).toString());

                        try {
                            combo.setIdCombo(datExistentes.get(combo.getDatoCombo()));
                        } catch (NullPointerException e) {
                        }

                        combos.add(combo);
                    }

                    resp = new AdministracionAgregar().agregandoListaDesplegables(combos, true);

                    if (resp) {
                        JOptionPane.showMessageDialog(this, "Datos guardados con exito", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                        limpiarComponentes();
                    } else {
                        JOptionPane.showMessageDialog(this, "Problemas al guardar los datos", "Advertencia", JOptionPane.WARNING_MESSAGE);
                        limpiarComponentes();
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "La tabla esta vacia \n no se pueder guardar", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
            JOptionPane.showMessageDialog(this, "Problemas al guardar los datos de la lista desplegable\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
            JOptionPane.showMessageDialog(this, "Problemas al guardar los datos de la lista desplegable\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed

        this.dispose();
}//GEN-LAST:event_jbCancelarActionPerformed

    private void jbModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarActionPerformed

        String dato = listaDatos.getSelectedValue().toString();
        txtDato.setText(dato);


    }//GEN-LAST:event_jbModificarActionPerformed

    private void cmbLibreriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLibreriaActionPerformed

        String lib = cmbLibreria.getSelectedItem().toString();
        limpiarListaDatos();

        for (Libreria l : librerias) {
            if (lib.equalsIgnoreCase(l.getDescripcion())) {
                traza.trace("libreria selecionada " + l.getDescripcion() + " su id es " + l.getIdLibreria(), Level.INFO);
                llenarComboCategoria(l.getDescripcion(), l.getIdLibreria());
                break;
            }
        }

    }//GEN-LAST:event_cmbLibreriaActionPerformed

    /**
     * Llena la lista desplegables de Categorias
     *
     * @param lib Nombre de la Libreria
     * @param idLibreria El id de la Libreria
     */
    private void llenarComboCategoria(String lib, int idLibreria) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            model.addElement("");

            traza.trace("buscando las categorias de la libreria: " + lib, Level.INFO);
            traza.trace("id de la libreria: " + idLibreria, Level.INFO);

            categorias = new AdministracionBusqueda().buscarCategoria("", idLibreria, 0);

            cmbIndice.setModel(new DefaultComboBoxModel());

            for (Categoria c : categorias) {
                if (c.getEstatus().equalsIgnoreCase("Activo")) {
                    model.addElement(c.getCategoria());
                }
            }
            cmbCategoria.setModel(model);

        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    private void cmbCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoriaActionPerformed

        traza.trace("llena la tabla de categorias", Level.INFO);

        String categoria = cmbCategoria.getSelectedItem().toString();

        traza.trace("Categoria seleccionada " + categoria, Level.INFO);

        for (Categoria cat : categorias) {
            if (categoria.equalsIgnoreCase(cat.getCategoria())) {
                llenarComboSubCategoria(cat.getCategoria(), cat.getIdCategoria());
                break;
            }
        }
    }//GEN-LAST:event_cmbCategoriaActionPerformed

    /**
     *
     *
     * @param cat el nombre de la Categoria
     * @param idCat el id de la categoria
     */
    private void llenarComboSubCategoria(String cat, int idCat) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            model.addElement("");

            traza.trace("buscando las SubCategorias de la Categorias: " + cat, Level.INFO);
            traza.trace("id de la categoria: " + idCat, Level.INFO);
            cmbSubCategoria.setSelectedItem("");

            subCategorias = new AdministracionBusqueda().buscarSubCategoria("", idCat, 0);

            if (!subCategorias.isEmpty()) {
                for (SubCategoria subca : subCategorias) {
                    if (subca.getEstatus().equalsIgnoreCase("Activo")) {
                        model.addElement(subca.getSubCategoria());
                    }
                }
                cmbSubCategoria.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "La categoria " + cat + " no posee subcategorias", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }


    private void cmbIndiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbIndiceActionPerformed

        traza.trace("llena la tabla de categorias", Level.INFO);

        llenarListaDatos();

    }//GEN-LAST:event_cmbIndiceActionPerformed

    /**
     * Llena la lista con los datos existentes del Indice seleccionado
     */
    private void llenarListaDatos() {

        DefaultListModel modelLista = new DefaultListModel();
        Vector filas;
        int cont = 1;

        try {
            String argu = cmbIndice.getSelectedItem().toString();

            traza.trace("indice seleccionado " + argu, Level.INFO);
            for (DatoAdicional arg : datosAdicionales) {
                if (arg.getIndiceDatoAdicional().equalsIgnoreCase(argu)) {
                    traza.trace("buscando los datos del indice " + argu + " id " + arg.getIdDatoAdicional(), Level.INFO);
                    datosExistentes = new AdministracionBusqueda().buscandoDatosCombo(arg.getIdDatoAdicional(), true);
                    break;
                }
            }

            traza.trace("tamaño de la lista de datos " + datosExistentes.size(), Level.INFO);

            if (!datosExistentes.isEmpty()) {
                existe = true;
                for (Combo cbo : datosExistentes) {

                    traza.trace("datos del indice " + argu + " " + cbo.getDatoCombo(), Level.INFO);
                    modelLista.addElement(cbo.getDatoCombo());

                }
            } else {
                existe = false;
            }
            listaDatos.setModel(modelLista);
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    private void cmbSubCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSubCategoriaActionPerformed

        String subCategoria = cmbSubCategoria.getSelectedItem().toString();

        traza.trace("Categoria seleccionada " + subCategoria, Level.INFO);

        for (SubCategoria sc : subCategorias) {
            if (subCategoria.equalsIgnoreCase(sc.getSubCategoria())) {
                llenarComboTipoDocumento(sc.getSubCategoria(), sc.getIdCategoria(), sc.getIdSubCategoria());
                break;
            }
        }
    }//GEN-LAST:event_cmbSubCategoriaActionPerformed

    /**
     * Llena la lista con los Tipos Documentos desde el evento ItemStateChanged
     * de la lista desplegable de las Categorias
     */
    private void llenarComboTipoDocumento(String subCat, int idCat, int idSubCat) {

        DefaultComboBoxModel model = new DefaultComboBoxModel();
        boolean flag = false;

        try {
            model.addElement("");
            cmbIndice.setModel(new DefaultComboBoxModel());

            traza.trace("buscando los Tipos de Documentos de la SubCategorias: " + subCat, Level.INFO);
            traza.trace("id de la categoria: " + idCat, Level.INFO);
            traza.trace("id de la subCategoria: " + idSubCat, Level.INFO);
//            cmbSubCategoria.setSelectedItem("");

            listaTipoDocumentos = new AdministracionBusqueda().buscarTipoDocumento("", idCat, idSubCat);

            if (!listaTipoDocumentos.isEmpty()) {
                for (TipoDocumento td : listaTipoDocumentos) {
                    if (td.getEstatus().equalsIgnoreCase("Activo")) {
                        if (td.getDatoAdicional().equalsIgnoreCase("1")) {
                            model.addElement(td.getTipoDocumento());
                            flag = true;
                        }
                    }
                }
                if (flag) {
                    cmbTipoDoc.setModel(model);
                } else {
                    JOptionPane.showMessageDialog(this, "La subCategoria " + subCat + " no posee Tipos de Documentos \ncon datos adicionales", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "La subCategoria " + subCat + " no posee Tipos de Documentos", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }

        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    private void cmbTipoDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoDocActionPerformed

        String tipoDoc = cmbTipoDoc.getSelectedItem().toString();

        traza.trace("Categoria seleccionada " + tipoDoc, Level.INFO);

        for (TipoDocumento td : listaTipoDocumentos) {
            if (tipoDoc.equalsIgnoreCase(td.getTipoDocumento())) {
                llenarComboIndice(td.getTipoDocumento(), td.getIdTipoDocumento());
                break;
            }
        }

    }//GEN-LAST:event_cmbTipoDocActionPerformed

    /**
     * Llena la lista desplegables de los indices Combos
     *
     * @param tipoDoc Nomnre de la Categoria
     * @param idTipoDoc El id de la Categoria
     */
    private void llenarComboIndice(String tipoDoc, int idTipoDoc) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            model.addElement("");

            cmbIndice.setModel(new DefaultComboBoxModel());
            listaDatos.setModel(new DefaultListModel());

            traza.trace("buscando los indices de la categoria: " + tipoDoc, Level.INFO);
            traza.trace("id de la categoria: " + idTipoDoc, Level.INFO);
            
            if(datosAdicionales != null){
                datosAdicionales.clear();
            }

            datosAdicionales = new AdministracionBusqueda().buscarIndDatoAdicional(idTipoDoc);
            
            if(!lstIndiceDACombos.isEmpty()){
                lstIndiceDACombos.clear();
            }

            for (DatoAdicional arg : datosAdicionales) {
                if (arg.getTipo().equalsIgnoreCase("COMBO")) {
                    model.addElement(arg.getIndiceDatoAdicional());
                    lstIndiceDACombos.add(arg);
                }
            }

            if (model.getSize() > 1) {
                cmbIndice.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "La Tipo de Documento " + tipoDoc + " no posee Datos Adicionales asociados de Listas Desplegable", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SOAPException ex) {
            traza.trace("error soap en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    /**
     * Limpia los componentes
     */
    private void limpiarComponentes() {
        //cmbLibreria.setSelectedItem("");
        llenarComboLibreria();
        limpiarListaDatos();
//        cmbCategoria.setModel(new DefaultComboBoxModel());
//        cmbIndice.setModel(new DefaultComboBoxModel());
//        cmbSubCategoria.setModel(new DefaultComboBoxModel());
//        cmbTipoDoc.setModel(new DefaultComboBoxModel());
//        tablaCombo.setModel(armarTabla());
//        listaDatos.setModel(new DefaultListModel());
    }

    private void limpiarListaDatos() {
        cmbCategoria.setModel(new DefaultComboBoxModel());
        cmbIndice.setModel(new DefaultComboBoxModel());
        cmbSubCategoria.setModel(new DefaultComboBoxModel());
        cmbTipoDoc.setModel(new DefaultComboBoxModel());
        tablaCombo.setModel(armarTabla());
        listaDatos.setModel(new DefaultListModel());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbCategoria;
    private javax.swing.JComboBox cmbIndice;
    private javax.swing.JComboBox cmbLibreria;
    private javax.swing.JComboBox cmbSubCategoria;
    private javax.swing.JComboBox cmbTipoDoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbModificar;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JList listaDatos;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelSuperior2;
    private javax.swing.JTable tablaCombo;
    private javax.swing.JTextField txtDato;
    // End of variables declaration//GEN-END:variables
}
