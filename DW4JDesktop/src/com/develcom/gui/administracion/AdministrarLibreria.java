/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AdministrarLibreria.java
 *
 * Created on 19/03/2012, 06:50:48 PM
 */
package com.develcom.gui.administracion;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import ve.com.develcom.administracion.AdministracionAgregar;
import ve.com.develcom.administracion.AdministracionBusqueda;
import com.develcom.administracion.Libreria;
import com.develcom.gui.Principal;
import com.develcom.gui.tools.CentraVentanas;
import com.develcom.gui.tools.ModeloTabla;
import com.develcom.tools.trazas.Traza;
import javax.xml.soap.SOAPException;
import javax.xml.ws.soap.SOAPFaultException;
import org.apache.log4j.Level;

/**
 * Administra las Librerias
 *
 * @author develcom
 */
public class AdministrarLibreria extends javax.swing.JInternalFrame {

    private static final long serialVersionUID = 8081800583212148360L;
    /**
     * Model para la tabla
     */
    private ModeloTabla modelTable;
    /**
     * Model para la tabla
     */
    private ModeloTabla modelTableExistentes;
    /**
     * Escribe trazas en elog
     */
    private Traza traza = new Traza(AdministrarLibreria.class);
    /**
     * Lista de librerias
     */
    private List<Libreria> listaLibrerias;

    /**
     * Comprieba si se modificara una libreria
     */
//    private boolean modifica = false;

    /**
     * Constructor, inica los componentes y llena la lista con las librerias
     */
    public AdministrarLibreria() {
        initComponents();

        grupoBotonesEstatus.add(jrbActivo);
        grupoBotonesEstatus.add(jrbInactivo);

        tablaLibreria.setModel(armarTabla());
        tablaExistentes.setModel(armarTablaExistentes());

        llenarTablaLibreria();
        setTitle("Administrar Librerias");
        CentraVentanas.centrar(this, Principal.desktop);
        setVisible(true);
    }

    /**
     * Crea los titulos de la Tabla
     *
     * @return DefaultTableModel
     */
    private DefaultTableModel armarTabla() {

        if (modelTable == null) {
            modelTable = new ModeloTabla();

            modelTable.addColumn("Nombre");
            modelTable.addColumn("Estatus");
        } else {
            modelTable.eliminarFilas();
        }

        return modelTable;

    }

    /**
     * Crea los titulos de la Tabla
     *
     * @return DefaultTableModel
     */
    private DefaultTableModel armarTablaExistentes() {

        if(modelTableExistentes==null){
            modelTableExistentes = new ModeloTabla();

            modelTableExistentes.addColumn("Nombre");
            modelTableExistentes.addColumn("Estatus");
        }else{
            modelTableExistentes.eliminarFilas();
        }
           
        return modelTableExistentes;

    }

    /**
     * Llena la tabla con las Librerias
     */
    private void llenarTablaLibreria() {
        Vector filas;

        try {

            listaLibrerias = new AdministracionBusqueda().buscarLibreria("", 0);

            if (!listaLibrerias.isEmpty()) {
                for (Libreria lib : listaLibrerias) {

                    filas = new Vector();

                    filas.add(lib.getDescripcion());
                    filas.add(lib.getEstatus());

                    modelTableExistentes.addRow(filas);
                    tablaExistentes.setModel(modelTableExistentes);
                    tablaExistentes.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                }
            }
        } catch (SOAPException | SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotonesEstatus = new javax.swing.ButtonGroup();
        panelSuperior = new javax.swing.JPanel();
        jbAgregar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtLibreria = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jrbActivo = new javax.swing.JRadioButton();
        jrbInactivo = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaExistentes = new javax.swing.JTable();
        jbCambioEstatus = new javax.swing.JButton();
        panelInferior = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaLibreria = new javax.swing.JTable();
        jbSalvar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();

        setBackground(new java.awt.Color(224, 239, 255));
        setTitle("Administrar Librerias");

        panelSuperior.setBackground(new java.awt.Color(224, 239, 255));

        jbAgregar.setText("Agregar");
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });

        jLabel6.setText("Nombre de la Libreria");

        txtLibreria.setToolTipText("");

        jLabel1.setText("Librerias existentes");

        jLabel2.setText("Estatus");

        jrbActivo.setBackground(new java.awt.Color(224, 239, 255));
        jrbActivo.setSelected(true);
        jrbActivo.setText("Activo");

        jrbInactivo.setBackground(new java.awt.Color(224, 239, 255));
        jrbInactivo.setText("Inactivo");

        tablaExistentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaExistentes);

        jbCambioEstatus.setText("Cambiar de Estatus");
        jbCambioEstatus.setToolTipText("Cambiar de Estatus");
        jbCambioEstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCambioEstatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSuperiorLayout = new javax.swing.GroupLayout(panelSuperior);
        panelSuperior.setLayout(panelSuperiorLayout);
        panelSuperiorLayout.setHorizontalGroup(
            panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSuperiorLayout.createSequentialGroup()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jbCambioEstatus)))
                    .addGroup(panelSuperiorLayout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jrbActivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbInactivo))
                    .addGroup(panelSuperiorLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLibreria, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSuperiorLayout.setVerticalGroup(
            panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbCambioEstatus)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelSuperiorLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(5, 5, 5))
                    .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLibreria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbAgregar)))
                .addGroup(panelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jrbActivo)
                    .addComponent(jrbInactivo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelInferior.setBackground(new java.awt.Color(224, 239, 255));

        tablaLibreria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaLibreria);

        jbSalvar.setText("Guardar");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbCancelar.setText("Cerrar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInferiorLayout = new javax.swing.GroupLayout(panelInferior);
        panelInferior.setLayout(panelInferiorLayout);
        panelInferiorLayout.setHorizontalGroup(
            panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInferiorLayout.createSequentialGroup()
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInferiorLayout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jbSalvar)
                        .addGap(69, 69, 69)
                        .addComponent(jbCancelar))
                    .addGroup(panelInferiorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        panelInferiorLayout.setVerticalGroup(
            panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInferiorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalvar)
                    .addComponent(jbCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelInferior, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
        agregarLibreria();
}//GEN-LAST:event_jbAgregarActionPerformed

    /**
     * Agrega la libreria a la tabla
     */
    private void agregarLibreria() {

        String libreria = "", estatus = "";
        Vector filas = new Vector();
        Vector ver;
        boolean banLista = true, banTabla = true;

        libreria = txtLibreria.getText();

        if (jrbActivo.isSelected()) {
            estatus = jrbActivo.getText();
        } else if (jrbInactivo.isSelected()) {
            estatus = jrbInactivo.getText();
        }

        if (!libreria.equalsIgnoreCase("")) {

            for (Libreria lib : listaLibrerias) {
                String li = lib.getDescripcion();
                if (li.equalsIgnoreCase(libreria)) {
                    banLista = false;
                    break;
                }
            }

            if (modelTable != null) {
                ver = modelTable.getDataVector();
                for (int i = 0; i < ver.size(); i++) {
                    Vector d = (Vector) ver.get(i);
                    String lib = d.get(0).toString();
                    if (lib.equalsIgnoreCase(libreria)) {
                        banTabla = false;
                        break;
                    }
                }
            }

            if (banTabla) {
                if (banLista) {
                    filas.add(libreria);
                    filas.add(estatus);
                    modelTable.addRow(filas);
                    tablaLibreria.setModel(modelTable);
                    txtLibreria.setText("");
                    txtLibreria.setEditable(true);
                    jrbActivo.setSelected(true);
                } else {

                    int n = JOptionPane.showOptionDialog(this, "Ya la libreria se encuentra en la lista de existentes \n ¿desea modificarlo?",
                            "¿?",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null, new Object[]{"SI", "NO"}, "NO");

                    if (n == JOptionPane.YES_OPTION) {
                        filas.add(libreria);
                        filas.add(estatus);
                        modelTable.addRow(filas);
                        tablaLibreria.setModel(modelTable);
                        txtLibreria.setText("");
                        txtLibreria.setEditable(true);
                        jrbActivo.setSelected(true);
                    } else {
                        txtLibreria.setText("");
                        txtLibreria.setEditable(true);
                    }

                    //JOptionPane.showMessageDialog(this, "Ya la libreria se encuentra en la lista de existentes", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Ya la libreria se encuentra en la tabla", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe colocar un nombre de libreria", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

    }

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        guardarLibreria();
}//GEN-LAST:event_jbSalvarActionPerformed

    /**
     * Guarda las librerias en la base de datos
     */
    private void guardarLibreria() {

        DefaultTableModel md;
        List<Libreria> librerias = new ArrayList<Libreria>();
        Libreria libreria;
        Vector libs;
        boolean resp = false;

        try {
            md = (DefaultTableModel) tablaLibreria.getModel();

            libs = md.getDataVector();

            int n = JOptionPane.showOptionDialog(this, "Seguro que desea guardar las librerias",
                    "¿?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, new Object[]{"SI", "NO"}, "NO");

            if (n == JOptionPane.YES_OPTION) {

                if (!libs.isEmpty()) {
                    for (int i = 0; i < libs.size(); i++) {
                        Vector vLib = (Vector) libs.get(i);
                        libreria = new Libreria();

                        libreria.setDescripcion((String) vLib.get(0));

                        if (vLib.get(1).toString().equalsIgnoreCase(jrbActivo.getText())) {
                            libreria.setEstatus("1");
                        } else if (vLib.get(1).toString().equalsIgnoreCase(jrbInactivo.getText())) {
                            libreria.setEstatus("2");
                        }

                        for (Libreria lib : listaLibrerias) {
                            if (libreria.getDescripcion().equalsIgnoreCase(lib.getDescripcion())) {
                                libreria.setIdLibreria(lib.getIdLibreria());
                            }
                        }

                        librerias.add(libreria);
                    }

                    resp = new AdministracionAgregar().insertarLibreria(librerias);

                    if (resp) {
                        JOptionPane.showMessageDialog(this, "Librerias guardadas con exito", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                        limpiarComponentes();
                    } else {
                        JOptionPane.showMessageDialog(this, "Problemas al guardar las Librerias", "Advertencia", JOptionPane.WARNING_MESSAGE);
                        limpiarComponentes();
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "La tabla de librerias esta vacia", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (SOAPException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        } catch (SOAPFaultException ex) {
            traza.trace("error soapfault en el webservice", Level.ERROR, ex);
        }

    }

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed

        this.dispose();
}//GEN-LAST:event_jbCancelarActionPerformed

    private void jbCambioEstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCambioEstatusActionPerformed

        //String libreria = ((String) tablaExistentes.getValueAt(tablaExistentes.getSelectedRow(), tablaExistentes.getSelectedColumn()));
        String libreria = ((String) tablaExistentes.getValueAt(tablaExistentes.getSelectedRow(), 0));

        txtLibreria.setText(libreria);
        txtLibreria.setEditable(false);
//        modifica = true;

    }//GEN-LAST:event_jbCambioEstatusActionPerformed

    public void limpiarComponentes() {
        txtLibreria.setText("");
        tablaLibreria.setModel(armarTabla());
        tablaExistentes.setModel(armarTablaExistentes());
        grupoBotonesEstatus.clearSelection();
        jrbActivo.setSelected(true);
        llenarTablaLibreria();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup grupoBotonesEstatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JButton jbCambioEstatus;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JRadioButton jrbActivo;
    private javax.swing.JRadioButton jrbInactivo;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JTable tablaExistentes;
    private javax.swing.JTable tablaLibreria;
    private javax.swing.JTextField txtLibreria;
    // End of variables declaration//GEN-END:variables
}
